
SolarPanelControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000110  00800200  00001016  000010aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001016  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800310  00800310  000011ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  0000122c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017da  00000000  00000000  0000137c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001070  00000000  00000000  00002b56  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e34  00000000  00000000  00003bc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000330  00000000  00000000  000049fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007ed  00000000  00000000  00004d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008b4  00000000  00000000  00005519  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00005dcd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
       6:	00 00       	nop
       8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
       a:	00 00       	nop
       c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
       e:	00 00       	nop
      10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
      12:	00 00       	nop
      14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
      16:	00 00       	nop
      18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
      1e:	00 00       	nop
      20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
      22:	00 00       	nop
      24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
      26:	00 00       	nop
      28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
      2e:	00 00       	nop
      30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
      32:	00 00       	nop
      34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
      36:	00 00       	nop
      38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
      3e:	00 00       	nop
      40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
      42:	00 00       	nop
      44:	a7 c4       	rjmp	.+2382   	; 0x994 <__vector_17>
      46:	00 00       	nop
      48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
      4e:	00 00       	nop
      50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
      52:	00 00       	nop
      54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
      56:	00 00       	nop
      58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
      5e:	00 00       	nop
      60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
      62:	00 00       	nop
      64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
      66:	00 00       	nop
      68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
      6e:	00 00       	nop
      70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
      72:	00 00       	nop
      74:	aa c0       	rjmp	.+340    	; 0x1ca <__vector_29>
      76:	00 00       	nop
      78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
      7e:	00 00       	nop
      80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
      82:	00 00       	nop
      84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
      86:	00 00       	nop
      88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
      8e:	00 00       	nop
      90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
      92:	00 00       	nop
      94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
      96:	00 00       	nop
      98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	83 c5       	rjmp	.+2822   	; 0xbb0 <__vector_42>
      aa:	00 00       	nop
      ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
      be:	00 00       	nop
      c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
      da:	00 00       	nop
      dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
      de:	00 00       	nop
      e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e6 e1       	ldi	r30, 0x16	; 22
      fc:	f0 e1       	ldi	r31, 0x10	; 16
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a0 31       	cpi	r26, 0x10	; 16
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	23 e0       	ldi	r18, 0x03	; 3
     110:	a0 e1       	ldi	r26, 0x10	; 16
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a2 33       	cpi	r26, 0x32	; 50
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	74 d5       	rcall	.+2792   	; 0xc08 <main>
     120:	78 c7       	rjmp	.+3824   	; 0x1012 <_exit>

00000122 <__bad_interrupt>:
     122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <adc_init>:
int16_t temp;

void adc_init()
{
	// Select input:PK7 is ADC15
	DDRK &= ~_BV(PK7);
     124:	e7 e0       	ldi	r30, 0x07	; 7
     126:	f1 e0       	ldi	r31, 0x01	; 1
     128:	80 81       	ld	r24, Z
     12a:	8f 77       	andi	r24, 0x7F	; 127
     12c:	80 83       	st	Z, r24
	
	//Select Output
	DDRG |= _BV(PG0);
     12e:	83 b3       	in	r24, 0x13	; 19
     130:	81 60       	ori	r24, 0x01	; 1
     132:	83 bb       	out	0x13, r24	; 19

	// And select channel 15 and Set AVCC with external capacitor at AREF pin
	ADMUX |= _BV(REFS0) | _BV(MUX2) | _BV(MUX1) | _BV(MUX0);
     134:	ec e7       	ldi	r30, 0x7C	; 124
     136:	f0 e0       	ldi	r31, 0x00	; 0
     138:	80 81       	ld	r24, Z
     13a:	87 64       	ori	r24, 0x47	; 71
     13c:	80 83       	st	Z, r24
	ADCSRB |= _BV(MUX5);
     13e:	eb e7       	ldi	r30, 0x7B	; 123
     140:	f0 e0       	ldi	r31, 0x00	; 0
     142:	80 81       	ld	r24, Z
     144:	88 60       	ori	r24, 0x08	; 8
     146:	80 83       	st	Z, r24

	//auto trigger source
	ADCSRB |= _BV(ADTS2) | _BV(ADTS0);
     148:	80 81       	ld	r24, Z
     14a:	85 60       	ori	r24, 0x05	; 5
     14c:	80 83       	st	Z, r24
	
	//enable auto trigger, choose prescaler : 128, enable ADC and enable interrupt
	ADCSRA |= _BV(ADEN) | _BV(ADATE) | _BV(ADIE) | _BV(ADPS0) | _BV(ADPS1) | _BV(ADPS2);
     14e:	ea e7       	ldi	r30, 0x7A	; 122
     150:	f0 e0       	ldi	r31, 0x00	; 0
     152:	80 81       	ld	r24, Z
     154:	8f 6a       	ori	r24, 0xAF	; 175
     156:	80 83       	st	Z, r24
	
	
	PORTG |= _BV(PG0);
     158:	84 b3       	in	r24, 0x14	; 20
     15a:	81 60       	ori	r24, 0x01	; 1
     15c:	84 bb       	out	0x14, r24	; 20
     15e:	08 95       	ret

00000160 <adc_read>:
	
}

void adc_read()
{
	ADCSRA |= _BV(ADSC);  /* Start the ADC conversion by setting ADSC bit */
     160:	ea e7       	ldi	r30, 0x7A	; 122
     162:	f0 e0       	ldi	r31, 0x00	; 0
     164:	80 81       	ld	r24, Z
     166:	80 64       	ori	r24, 0x40	; 64
     168:	80 83       	st	Z, r24
	
	/* Wait till the conversion is over */
	while(ADCSRA&(1<<ADSC))
     16a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
     16e:	86 fd       	sbrc	r24, 6
     170:	fc cf       	rjmp	.-8      	; 0x16a <adc_read+0xa>
	{

	}
}
     172:	08 95       	ret

00000174 <temp_convertToCelcius>:

int16_t temp_convertToCelcius()
{
	degree=((((float)ADC*50/1024)*100)-500)/10;//ADC on 2^10 bits so a resolution of 1024. Vref=5V and use the formula : (Vin-500)/10 with Vin=ADC*5/1024  //degree=((((float)ADC*50/1024)*100)-500)*10;
     174:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
     178:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
     17c:	80 e0       	ldi	r24, 0x00	; 0
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	48 d6       	rcall	.+3216   	; 0xe12 <__floatunsisf>
     182:	20 e0       	ldi	r18, 0x00	; 0
     184:	30 e0       	ldi	r19, 0x00	; 0
     186:	48 e4       	ldi	r20, 0x48	; 72
     188:	52 e4       	ldi	r21, 0x42	; 66
     18a:	d1 d6       	rcall	.+3490   	; 0xf2e <__mulsf3>
     18c:	20 e0       	ldi	r18, 0x00	; 0
     18e:	30 e0       	ldi	r19, 0x00	; 0
     190:	40 e8       	ldi	r20, 0x80	; 128
     192:	5a e3       	ldi	r21, 0x3A	; 58
     194:	cc d6       	rcall	.+3480   	; 0xf2e <__mulsf3>
     196:	20 e0       	ldi	r18, 0x00	; 0
     198:	30 e0       	ldi	r19, 0x00	; 0
     19a:	48 ec       	ldi	r20, 0xC8	; 200
     19c:	52 e4       	ldi	r21, 0x42	; 66
     19e:	c7 d6       	rcall	.+3470   	; 0xf2e <__mulsf3>
     1a0:	20 e0       	ldi	r18, 0x00	; 0
     1a2:	30 e0       	ldi	r19, 0x00	; 0
     1a4:	4a ef       	ldi	r20, 0xFA	; 250
     1a6:	53 e4       	ldi	r21, 0x43	; 67
     1a8:	36 d5       	rcall	.+2668   	; 0xc16 <__subsf3>
     1aa:	20 e0       	ldi	r18, 0x00	; 0
     1ac:	30 e0       	ldi	r19, 0x00	; 0
     1ae:	40 e2       	ldi	r20, 0x20	; 32
     1b0:	51 e4       	ldi	r21, 0x41	; 65
     1b2:	96 d5       	rcall	.+2860   	; 0xce0 <__divsf3>
     1b4:	60 93 1a 03 	sts	0x031A, r22	; 0x80031a <degree>
     1b8:	70 93 1b 03 	sts	0x031B, r23	; 0x80031b <degree+0x1>
     1bc:	80 93 1c 03 	sts	0x031C, r24	; 0x80031c <degree+0x2>
     1c0:	90 93 1d 03 	sts	0x031D, r25	; 0x80031d <degree+0x3>
	int16_t temp = (int16_t)degree;//force to INT
     1c4:	f5 d5       	rcall	.+3050   	; 0xdb0 <__fixsfsi>
     1c6:	cb 01       	movw	r24, r22
	return(temp);
}
     1c8:	08 95       	ret

000001ca <__vector_29>:
     1ca:	1f 92       	push	r1

//Interrupt ADC --> result of the conversion
ISR(ADC_vect){
     1cc:	0f 92       	push	r0
     1ce:	0f b6       	in	r0, 0x3f	; 63
     1d0:	0f 92       	push	r0
     1d2:	11 24       	eor	r1, r1
     1d4:	0b b6       	in	r0, 0x3b	; 59
     1d6:	0f 92       	push	r0
     1d8:	2f 93       	push	r18
     1da:	3f 93       	push	r19
     1dc:	4f 93       	push	r20
     1de:	5f 93       	push	r21
     1e0:	6f 93       	push	r22
     1e2:	7f 93       	push	r23
     1e4:	8f 93       	push	r24
     1e6:	9f 93       	push	r25
     1e8:	af 93       	push	r26
     1ea:	bf 93       	push	r27
     1ec:	ef 93       	push	r30
     1ee:	ff 93       	push	r31
	sample=ADC;
     1f0:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
     1f4:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
     1f8:	80 e0       	ldi	r24, 0x00	; 0
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	0a d6       	rcall	.+3092   	; 0xe12 <__floatunsisf>
     1fe:	60 93 1e 03 	sts	0x031E, r22	; 0x80031e <sample>
     202:	70 93 1f 03 	sts	0x031F, r23	; 0x80031f <sample+0x1>
     206:	80 93 20 03 	sts	0x0320, r24	; 0x800320 <sample+0x2>
     20a:	90 93 21 03 	sts	0x0321, r25	; 0x800321 <sample+0x3>
     20e:	ff 91       	pop	r31
     210:	ef 91       	pop	r30
     212:	bf 91       	pop	r27
     214:	af 91       	pop	r26
     216:	9f 91       	pop	r25
     218:	8f 91       	pop	r24
     21a:	7f 91       	pop	r23
     21c:	6f 91       	pop	r22
     21e:	5f 91       	pop	r21
     220:	4f 91       	pop	r20
     222:	3f 91       	pop	r19
     224:	2f 91       	pop	r18
     226:	0f 90       	pop	r0
     228:	0b be       	out	0x3b, r0	; 59
     22a:	0f 90       	pop	r0
     22c:	0f be       	out	0x3f, r0	; 63
     22e:	0f 90       	pop	r0
     230:	1f 90       	pop	r1
     232:	18 95       	reti

00000234 <init_keys>:
#include <avr/io.h>

void init_keys()
{
	//Set DDRC on input
	DDRC &= ~(_BV(PINC0) | _BV(PINC1) | _BV(PINC2) | _BV(PINC3) | _BV(PINC4) | _BV(PINC5));
     234:	87 b1       	in	r24, 0x07	; 7
     236:	80 7c       	andi	r24, 0xC0	; 192
     238:	87 b9       	out	0x07, r24	; 7
	// Set PORTC 0-5 to pull up on input
	PORTC |= _BV(PINC0) | _BV(PINC1) | _BV(PINC2) | _BV(PINC3) | _BV(PINC4) | _BV(PINC5);
     23a:	88 b1       	in	r24, 0x08	; 8
     23c:	8f 63       	ori	r24, 0x3F	; 63
     23e:	88 b9       	out	0x08, r24	; 8
     240:	08 95       	ret

00000242 <get_key>:
}

uint8_t get_key(uint8_t key_no)// key_no [1..6], return true if key pressed
{
	uint8_t statut = PINC & _BV(key_no - 1);//read port C pin key_no-1
     242:	46 b1       	in	r20, 0x06	; 6
     244:	28 2f       	mov	r18, r24
     246:	30 e0       	ldi	r19, 0x00	; 0
     248:	21 50       	subi	r18, 0x01	; 1
     24a:	31 09       	sbc	r19, r1
     24c:	81 e0       	ldi	r24, 0x01	; 1
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	02 c0       	rjmp	.+4      	; 0x256 <get_key+0x14>
     252:	88 0f       	add	r24, r24
     254:	99 1f       	adc	r25, r25
     256:	2a 95       	dec	r18
     258:	e2 f7       	brpl	.-8      	; 0x252 <get_key+0x10>
     25a:	84 23       	and	r24, r20
	if (statut == 0)
     25c:	11 f4       	brne	.+4      	; 0x262 <get_key+0x20>
	{
		return 1;
     25e:	81 e0       	ldi	r24, 0x01	; 1
     260:	08 95       	ret
	}
	else
	{
		return 0;
     262:	80 e0       	ldi	r24, 0x00	; 0
	}
     264:	08 95       	ret

00000266 <inits_leds>:
 */ 

#include <avr/io.h>

void inits_leds() {
	DDRA = 0xFF;
     266:	8f ef       	ldi	r24, 0xFF	; 255
     268:	81 b9       	out	0x01, r24	; 1
	PORTA = 0xFF;
     26a:	82 b9       	out	0x02, r24	; 2
     26c:	08 95       	ret

0000026e <set_led>:
}

void set_led(uint8_t led_no, uint8_t state) {
	if (state == 1) {
     26e:	61 30       	cpi	r22, 0x01	; 1
     270:	81 f4       	brne	.+32     	; 0x292 <set_led+0x24>
		PORTA &= ~(1 << led_no-1);
     272:	42 b1       	in	r20, 0x02	; 2
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	01 97       	sbiw	r24, 0x01	; 1
     278:	21 e0       	ldi	r18, 0x01	; 1
     27a:	30 e0       	ldi	r19, 0x00	; 0
     27c:	b9 01       	movw	r22, r18
     27e:	02 c0       	rjmp	.+4      	; 0x284 <set_led+0x16>
     280:	66 0f       	add	r22, r22
     282:	77 1f       	adc	r23, r23
     284:	8a 95       	dec	r24
     286:	e2 f7       	brpl	.-8      	; 0x280 <set_led+0x12>
     288:	cb 01       	movw	r24, r22
     28a:	80 95       	com	r24
     28c:	84 23       	and	r24, r20
     28e:	82 b9       	out	0x02, r24	; 2
     290:	08 95       	ret
	}
	else if (state == 0) {
     292:	61 11       	cpse	r22, r1
     294:	0e c0       	rjmp	.+28     	; 0x2b2 <set_led+0x44>
		PORTA |= 1 << led_no-1;
     296:	42 b1       	in	r20, 0x02	; 2
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	01 97       	sbiw	r24, 0x01	; 1
     29c:	21 e0       	ldi	r18, 0x01	; 1
     29e:	30 e0       	ldi	r19, 0x00	; 0
     2a0:	b9 01       	movw	r22, r18
     2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <set_led+0x3a>
     2a4:	66 0f       	add	r22, r22
     2a6:	77 1f       	adc	r23, r23
     2a8:	8a 95       	dec	r24
     2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <set_led+0x36>
     2ac:	cb 01       	movw	r24, r22
     2ae:	84 2b       	or	r24, r20
     2b0:	82 b9       	out	0x02, r24	; 2
     2b2:	08 95       	ret

000002b4 <init_keyboard>:
	{&DDRH, &PINH, &PORTH, PH5},	// col3
	{&DDRL, &PINL, &PORTL, PL1},	// col4
};

void init_keyboard()
{
     2b4:	cf 93       	push	r28
     2b6:	df 93       	push	r29
	// Initialize input-pin for keys
	for(uint8_t i=0; i<4; i++)
     2b8:	40 e0       	ldi	r20, 0x00	; 0
     2ba:	3d c0       	rjmp	.+122    	; 0x336 <init_keyboard+0x82>
	{
		// Initialize Data Direction Register for each row-pin
		*(row[i].ddr) |= _BV(row[i].bit);
     2bc:	84 2f       	mov	r24, r20
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	fc 01       	movw	r30, r24
     2c2:	ee 0f       	add	r30, r30
     2c4:	ff 1f       	adc	r31, r31
     2c6:	ee 0f       	add	r30, r30
     2c8:	ff 1f       	adc	r31, r31
     2ca:	ee 0f       	add	r30, r30
     2cc:	ff 1f       	adc	r31, r31
     2ce:	e8 1b       	sub	r30, r24
     2d0:	f9 0b       	sbc	r31, r25
     2d2:	df 01       	movw	r26, r30
     2d4:	ac 50       	subi	r26, 0x0C	; 12
     2d6:	bd 4f       	sbci	r27, 0xFD	; 253
     2d8:	cd 91       	ld	r28, X+
     2da:	dc 91       	ld	r29, X
     2dc:	11 97       	sbiw	r26, 0x01	; 1
     2de:	58 81       	ld	r21, Y
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	9c 01       	movw	r18, r24
     2e6:	16 96       	adiw	r26, 0x06	; 6
     2e8:	0c 90       	ld	r0, X
     2ea:	16 97       	sbiw	r26, 0x06	; 6
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <init_keyboard+0x3e>
     2ee:	22 0f       	add	r18, r18
     2f0:	33 1f       	adc	r19, r19
     2f2:	0a 94       	dec	r0
     2f4:	e2 f7       	brpl	.-8      	; 0x2ee <init_keyboard+0x3a>
     2f6:	35 2f       	mov	r19, r21
     2f8:	32 2b       	or	r19, r18
     2fa:	38 83       	st	Y, r19
		
		// Enable Pull-ups on each row output
		*(row[i].port) |= _BV(row[i].bit);
     2fc:	14 96       	adiw	r26, 0x04	; 4
     2fe:	0d 90       	ld	r0, X+
     300:	bc 91       	ld	r27, X
     302:	a0 2d       	mov	r26, r0
     304:	3c 91       	ld	r19, X
     306:	23 2b       	or	r18, r19
     308:	2c 93       	st	X, r18
		
		// Initialize Data Direction Register for each col-pin
		*(col[i].ddr) &= ~_BV(col[i].bit);
     30a:	e8 52       	subi	r30, 0x28	; 40
     30c:	fd 4f       	sbci	r31, 0xFD	; 253
     30e:	a0 81       	ld	r26, Z
     310:	b1 81       	ldd	r27, Z+1	; 0x01
     312:	2c 91       	ld	r18, X
     314:	06 80       	ldd	r0, Z+6	; 0x06
     316:	02 c0       	rjmp	.+4      	; 0x31c <init_keyboard+0x68>
     318:	88 0f       	add	r24, r24
     31a:	99 1f       	adc	r25, r25
     31c:	0a 94       	dec	r0
     31e:	e2 f7       	brpl	.-8      	; 0x318 <init_keyboard+0x64>
     320:	98 2f       	mov	r25, r24
     322:	90 95       	com	r25
     324:	92 23       	and	r25, r18
     326:	9c 93       	st	X, r25
		
		// Enable Pull-ups on each col input
		*(col[i].port) |= _BV(col[i].bit);
     328:	04 80       	ldd	r0, Z+4	; 0x04
     32a:	f5 81       	ldd	r31, Z+5	; 0x05
     32c:	e0 2d       	mov	r30, r0
     32e:	90 81       	ld	r25, Z
     330:	89 2b       	or	r24, r25
     332:	80 83       	st	Z, r24
};

void init_keyboard()
{
	// Initialize input-pin for keys
	for(uint8_t i=0; i<4; i++)
     334:	4f 5f       	subi	r20, 0xFF	; 255
     336:	44 30       	cpi	r20, 0x04	; 4
     338:	08 f2       	brcs	.-126    	; 0x2bc <init_keyboard+0x8>
		*(col[i].ddr) &= ~_BV(col[i].bit);
		
		// Enable Pull-ups on each col input
		*(col[i].port) |= _BV(col[i].bit);
	}
}
     33a:	df 91       	pop	r29
     33c:	cf 91       	pop	r28
     33e:	08 95       	ret

00000340 <test_col>:

uint8_t test_col(uint8_t key_no)
{
	if((key_no >= 1) && (key_no <= 4))
     340:	81 50       	subi	r24, 0x01	; 1
     342:	84 30       	cpi	r24, 0x04	; 4
     344:	d0 f4       	brcc	.+52     	; 0x37a <test_col+0x3a>
	{
		key_no--;	// Convert key number to index

		// Evaluate if key is activated (Active low)
		return ((*(col[key_no].pin) & _BV(col[key_no].bit))==0);
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	fc 01       	movw	r30, r24
     34a:	ee 0f       	add	r30, r30
     34c:	ff 1f       	adc	r31, r31
     34e:	ee 0f       	add	r30, r30
     350:	ff 1f       	adc	r31, r31
     352:	ee 0f       	add	r30, r30
     354:	ff 1f       	adc	r31, r31
     356:	e8 1b       	sub	r30, r24
     358:	f9 0b       	sbc	r31, r25
     35a:	e8 52       	subi	r30, 0x28	; 40
     35c:	fd 4f       	sbci	r31, 0xFD	; 253
     35e:	a2 81       	ldd	r26, Z+2	; 0x02
     360:	b3 81       	ldd	r27, Z+3	; 0x03
     362:	8c 91       	ld	r24, X
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	06 80       	ldd	r0, Z+6	; 0x06
     368:	02 c0       	rjmp	.+4      	; 0x36e <test_col+0x2e>
     36a:	95 95       	asr	r25
     36c:	87 95       	ror	r24
     36e:	0a 94       	dec	r0
     370:	e2 f7       	brpl	.-8      	; 0x36a <test_col+0x2a>
     372:	21 e0       	ldi	r18, 0x01	; 1
     374:	82 27       	eor	r24, r18
     376:	81 70       	andi	r24, 0x01	; 1
     378:	08 95       	ret
	}
	return 0;
     37a:	80 e0       	ldi	r24, 0x00	; 0
}
     37c:	08 95       	ret

0000037e <change_row>:

uint8_t change_row(uint8_t nbrow)
{
	int index=nbrow-1;
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	01 97       	sbiw	r24, 0x01	; 1
	if(changerow)
     382:	20 91 16 03 	lds	r18, 0x0316	; 0x800316 <changerow>
     386:	30 91 17 03 	lds	r19, 0x0317	; 0x800317 <changerow+0x1>
     38a:	23 2b       	or	r18, r19
     38c:	e9 f0       	breq	.+58     	; 0x3c8 <change_row+0x4a>
	{
		*(row[index].port) |= _BV(row[index].bit);
     38e:	fc 01       	movw	r30, r24
     390:	ee 0f       	add	r30, r30
     392:	ff 1f       	adc	r31, r31
     394:	ee 0f       	add	r30, r30
     396:	ff 1f       	adc	r31, r31
     398:	ee 0f       	add	r30, r30
     39a:	ff 1f       	adc	r31, r31
     39c:	e8 1b       	sub	r30, r24
     39e:	f9 0b       	sbc	r31, r25
     3a0:	ec 50       	subi	r30, 0x0C	; 12
     3a2:	fd 4f       	sbci	r31, 0xFD	; 253
     3a4:	a4 81       	ldd	r26, Z+4	; 0x04
     3a6:	b5 81       	ldd	r27, Z+5	; 0x05
     3a8:	2c 91       	ld	r18, X
     3aa:	81 e0       	ldi	r24, 0x01	; 1
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	06 80       	ldd	r0, Z+6	; 0x06
     3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <change_row+0x38>
     3b2:	88 0f       	add	r24, r24
     3b4:	99 1f       	adc	r25, r25
     3b6:	0a 94       	dec	r0
     3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <change_row+0x34>
     3ba:	82 2b       	or	r24, r18
     3bc:	8c 93       	st	X, r24
		changerow=0;
     3be:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <changerow+0x1>
     3c2:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <changerow>
     3c6:	08 95       	ret
	}
	else
	{
		*(row[index].port) &= ~_BV(row[index].bit);
     3c8:	fc 01       	movw	r30, r24
     3ca:	ee 0f       	add	r30, r30
     3cc:	ff 1f       	adc	r31, r31
     3ce:	ee 0f       	add	r30, r30
     3d0:	ff 1f       	adc	r31, r31
     3d2:	ee 0f       	add	r30, r30
     3d4:	ff 1f       	adc	r31, r31
     3d6:	e8 1b       	sub	r30, r24
     3d8:	f9 0b       	sbc	r31, r25
     3da:	ec 50       	subi	r30, 0x0C	; 12
     3dc:	fd 4f       	sbci	r31, 0xFD	; 253
     3de:	a4 81       	ldd	r26, Z+4	; 0x04
     3e0:	b5 81       	ldd	r27, Z+5	; 0x05
     3e2:	9c 91       	ld	r25, X
     3e4:	41 e0       	ldi	r20, 0x01	; 1
     3e6:	50 e0       	ldi	r21, 0x00	; 0
     3e8:	9a 01       	movw	r18, r20
     3ea:	06 80       	ldd	r0, Z+6	; 0x06
     3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <change_row+0x74>
     3ee:	22 0f       	add	r18, r18
     3f0:	33 1f       	adc	r19, r19
     3f2:	0a 94       	dec	r0
     3f4:	e2 f7       	brpl	.-8      	; 0x3ee <change_row+0x70>
     3f6:	82 2f       	mov	r24, r18
     3f8:	80 95       	com	r24
     3fa:	89 23       	and	r24, r25
     3fc:	8c 93       	st	X, r24
		changerow=1;
     3fe:	50 93 17 03 	sts	0x0317, r21	; 0x800317 <changerow+0x1>
     402:	40 93 16 03 	sts	0x0316, r20	; 0x800316 <changerow>
	}
}
     406:	08 95       	ret

00000408 <get_col>:

uint8_t get_col()
{
     408:	cf 93       	push	r28
     40a:	df 93       	push	r29
	for(uint8_t i=1; i<=4; i++)
     40c:	d1 e0       	ldi	r29, 0x01	; 1
     40e:	14 c0       	rjmp	.+40     	; 0x438 <get_col+0x30>
	{
		change_row(i);
     410:	8d 2f       	mov	r24, r29
     412:	b5 df       	rcall	.-150    	; 0x37e <change_row>
		for(uint8_t j=1; j<=4; j++)
     414:	c1 e0       	ldi	r28, 0x01	; 1
     416:	0b c0       	rjmp	.+22     	; 0x42e <get_col+0x26>
		{
			if(test_col(j))
     418:	8c 2f       	mov	r24, r28
     41a:	92 df       	rcall	.-220    	; 0x340 <test_col>
     41c:	88 23       	and	r24, r24
     41e:	31 f0       	breq	.+12     	; 0x42c <get_col+0x24>
			{
				c=j;
     420:	8c 2f       	mov	r24, r28
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	90 93 23 03 	sts	0x0323, r25	; 0x800323 <c+0x1>
     428:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <c>
uint8_t get_col()
{
	for(uint8_t i=1; i<=4; i++)
	{
		change_row(i);
		for(uint8_t j=1; j<=4; j++)
     42c:	cf 5f       	subi	r28, 0xFF	; 255
     42e:	c5 30       	cpi	r28, 0x05	; 5
			if(test_col(j))
			{
				c=j;
			}
		}
		change_row(i);
     430:	98 f3       	brcs	.-26     	; 0x418 <get_col+0x10>
     432:	8d 2f       	mov	r24, r29
     434:	a4 df       	rcall	.-184    	; 0x37e <change_row>
	}
}

uint8_t get_col()
{
	for(uint8_t i=1; i<=4; i++)
     436:	df 5f       	subi	r29, 0xFF	; 255
     438:	d5 30       	cpi	r29, 0x05	; 5
     43a:	50 f3       	brcs	.-44     	; 0x410 <get_col+0x8>
			}
		}
		change_row(i);
	}
	return c;
}
     43c:	80 91 22 03 	lds	r24, 0x0322	; 0x800322 <c>
     440:	df 91       	pop	r29
     442:	cf 91       	pop	r28
     444:	08 95       	ret

00000446 <get_row>:

uint8_t get_row()
{
     446:	0f 93       	push	r16
     448:	1f 93       	push	r17
     44a:	cf 93       	push	r28
     44c:	df 93       	push	r29
	int r=0;
	for(uint8_t i=1; i<=4; i++)
     44e:	d1 e0       	ldi	r29, 0x01	; 1
	return c;
}

uint8_t get_row()
{
	int r=0;
     450:	00 e0       	ldi	r16, 0x00	; 0
     452:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=1; i<=4; i++)
     454:	0e c0       	rjmp	.+28     	; 0x472 <get_row+0x2c>
	{
		change_row(i);
     456:	8d 2f       	mov	r24, r29
     458:	92 df       	rcall	.-220    	; 0x37e <change_row>
		for(uint8_t j=1; j<=4; j++)
     45a:	c1 e0       	ldi	r28, 0x01	; 1
     45c:	05 c0       	rjmp	.+10     	; 0x468 <get_row+0x22>
		{
			if(test_col(j))
     45e:	8c 2f       	mov	r24, r28
     460:	6f df       	rcall	.-290    	; 0x340 <test_col>
     462:	81 11       	cpse	r24, r1
			{
				r=i;
     464:	0d 2f       	mov	r16, r29
{
	int r=0;
	for(uint8_t i=1; i<=4; i++)
	{
		change_row(i);
		for(uint8_t j=1; j<=4; j++)
     466:	cf 5f       	subi	r28, 0xFF	; 255
     468:	c5 30       	cpi	r28, 0x05	; 5
			if(test_col(j))
			{
				r=i;
			}
		}
		change_row(i);
     46a:	c8 f3       	brcs	.-14     	; 0x45e <get_row+0x18>
     46c:	8d 2f       	mov	r24, r29
     46e:	87 df       	rcall	.-242    	; 0x37e <change_row>
}

uint8_t get_row()
{
	int r=0;
	for(uint8_t i=1; i<=4; i++)
     470:	df 5f       	subi	r29, 0xFF	; 255
     472:	d5 30       	cpi	r29, 0x05	; 5
     474:	80 f3       	brcs	.-32     	; 0x456 <get_row+0x10>
			}
		}
		change_row(i);
	}
	return r;	
}
     476:	80 2f       	mov	r24, r16
     478:	df 91       	pop	r29
     47a:	cf 91       	pop	r28
     47c:	1f 91       	pop	r17
     47e:	0f 91       	pop	r16
     480:	08 95       	ret

00000482 <getxkey>:


uint8_t getxkey()
{
     482:	cf 93       	push	r28
     484:	df 93       	push	r29
	if (get_row()==0)
     486:	df df       	rcall	.-66     	; 0x446 <get_row>
     488:	81 11       	cpse	r24, r1
     48a:	07 c0       	rjmp	.+14     	; 0x49a <getxkey+0x18>
	{
		v=99;
     48c:	83 e6       	ldi	r24, 0x63	; 99
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	90 93 25 03 	sts	0x0325, r25	; 0x800325 <v+0x1>
     494:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <v>
	}
	else
	{
		v=keyboard[get_row()-1][get_col()-1];
     498:	1a c0       	rjmp	.+52     	; 0x4ce <getxkey+0x4c>
     49a:	d5 df       	rcall	.-86     	; 0x446 <get_row>
     49c:	c8 2f       	mov	r28, r24
     49e:	d0 e0       	ldi	r29, 0x00	; 0
     4a0:	21 97       	sbiw	r28, 0x01	; 1
     4a2:	b2 df       	rcall	.-156    	; 0x408 <get_col>
     4a4:	e8 2f       	mov	r30, r24
     4a6:	f0 e0       	ldi	r31, 0x00	; 0
     4a8:	cf 01       	movw	r24, r30
     4aa:	01 97       	sbiw	r24, 0x01	; 1
     4ac:	fe 01       	movw	r30, r28
     4ae:	ee 0f       	add	r30, r30
     4b0:	ff 1f       	adc	r31, r31
     4b2:	ee 0f       	add	r30, r30
     4b4:	ff 1f       	adc	r31, r31
     4b6:	e8 0f       	add	r30, r24
     4b8:	f9 1f       	adc	r31, r25
     4ba:	ee 0f       	add	r30, r30
     4bc:	ff 1f       	adc	r31, r31
     4be:	e0 50       	subi	r30, 0x00	; 0
     4c0:	fe 4f       	sbci	r31, 0xFE	; 254
     4c2:	80 81       	ld	r24, Z
     4c4:	91 81       	ldd	r25, Z+1	; 0x01
     4c6:	90 93 25 03 	sts	0x0325, r25	; 0x800325 <v+0x1>
     4ca:	80 93 24 03 	sts	0x0324, r24	; 0x800324 <v>
	}
	return v;
}
     4ce:	80 91 24 03 	lds	r24, 0x0324	; 0x800324 <v>
     4d2:	df 91       	pop	r29
     4d4:	cf 91       	pop	r28
     4d6:	08 95       	ret

000004d8 <keyboard_display>:

uint16_t keyboard_display()
{
	//display all number if we press more than one number, so a big number and restart it from the beginning if you press 5 numbers
	uint16_t simpleValue=getxkey();
     4d8:	d4 df       	rcall	.-88     	; 0x482 <getxkey>
     4da:	90 e0       	ldi	r25, 0x00	; 0
	if(simpleValue<=9 || simpleValue==99)
     4dc:	8a 30       	cpi	r24, 0x0A	; 10
     4de:	91 05       	cpc	r25, r1
     4e0:	20 f0       	brcs	.+8      	; 0x4ea <keyboard_display+0x12>
     4e2:	83 36       	cpi	r24, 0x63	; 99
     4e4:	91 05       	cpc	r25, r1
     4e6:	09 f0       	breq	.+2      	; 0x4ea <keyboard_display+0x12>
     4e8:	44 c0       	rjmp	.+136    	; 0x572 <keyboard_display+0x9a>
	{
		if(simpleValue==99)
     4ea:	83 36       	cpi	r24, 0x63	; 99
     4ec:	91 05       	cpc	r25, r1
     4ee:	21 f4       	brne	.+8      	; 0x4f8 <keyboard_display+0x20>
		{
			moreOneNumber=0;
     4f0:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <moreOneNumber+0x1>
     4f4:	10 92 12 03 	sts	0x0312, r1	; 0x800312 <moreOneNumber>
		}
		if (moreOneNumber==0 && simpleValue !=99)
     4f8:	20 91 12 03 	lds	r18, 0x0312	; 0x800312 <moreOneNumber>
     4fc:	30 91 13 03 	lds	r19, 0x0313	; 0x800313 <moreOneNumber+0x1>
     500:	23 2b       	or	r18, r19
     502:	b9 f5       	brne	.+110    	; 0x572 <keyboard_display+0x9a>
     504:	83 36       	cpi	r24, 0x63	; 99
     506:	91 05       	cpc	r25, r1
     508:	a1 f1       	breq	.+104    	; 0x572 <keyboard_display+0x9a>
		{
			if (count==4)
     50a:	20 91 10 03 	lds	r18, 0x0310	; 0x800310 <__data_end>
     50e:	30 91 11 03 	lds	r19, 0x0311	; 0x800311 <__data_end+0x1>
     512:	24 30       	cpi	r18, 0x04	; 4
     514:	31 05       	cpc	r19, r1
     516:	49 f4       	brne	.+18     	; 0x52a <keyboard_display+0x52>
			{
				bigvalue=simpleValue;
     518:	90 93 15 03 	sts	0x0315, r25	; 0x800315 <bigvalue+0x1>
     51c:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <bigvalue>
				count=0;
     520:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <__data_end+0x1>
     524:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <__data_end>
     528:	15 c0       	rjmp	.+42     	; 0x554 <keyboard_display+0x7c>
			}
			else
			{
				bigvalue=bigvalue*10+simpleValue;
     52a:	20 91 14 03 	lds	r18, 0x0314	; 0x800314 <bigvalue>
     52e:	30 91 15 03 	lds	r19, 0x0315	; 0x800315 <bigvalue+0x1>
     532:	a9 01       	movw	r20, r18
     534:	44 0f       	add	r20, r20
     536:	55 1f       	adc	r21, r21
     538:	22 0f       	add	r18, r18
     53a:	33 1f       	adc	r19, r19
     53c:	22 0f       	add	r18, r18
     53e:	33 1f       	adc	r19, r19
     540:	22 0f       	add	r18, r18
     542:	33 1f       	adc	r19, r19
     544:	24 0f       	add	r18, r20
     546:	35 1f       	adc	r19, r21
     548:	82 0f       	add	r24, r18
     54a:	93 1f       	adc	r25, r19
     54c:	90 93 15 03 	sts	0x0315, r25	; 0x800315 <bigvalue+0x1>
     550:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <bigvalue>
			}
			moreOneNumber=1;
     554:	81 e0       	ldi	r24, 0x01	; 1
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	90 93 13 03 	sts	0x0313, r25	; 0x800313 <moreOneNumber+0x1>
     55c:	80 93 12 03 	sts	0x0312, r24	; 0x800312 <moreOneNumber>
			count++;
     560:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <__data_end>
     564:	90 91 11 03 	lds	r25, 0x0311	; 0x800311 <__data_end+0x1>
     568:	01 96       	adiw	r24, 0x01	; 1
     56a:	90 93 11 03 	sts	0x0311, r25	; 0x800311 <__data_end+0x1>
     56e:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <__data_end>
		}
	}
	return bigvalue;
}
     572:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <bigvalue>
     576:	90 91 15 03 	lds	r25, 0x0315	; 0x800315 <bigvalue+0x1>
     57a:	08 95       	ret

0000057c <resetvalue>:

void resetvalue()
{
	bigvalue=0;
     57c:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <bigvalue+0x1>
     580:	10 92 14 03 	sts	0x0314, r1	; 0x800314 <bigvalue>
	count=0;
     584:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <__data_end+0x1>
     588:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <__data_end>
     58c:	08 95       	ret

0000058e <time_init>:

void time_init(void)
{
	//Timer 1 for the display each 10 millisecond
	// set up timer with prescaler = 8 and CTC mode
	TCCR1B |= _BV(WGM12)| _BV(CS11);
     58e:	e1 e8       	ldi	r30, 0x81	; 129
     590:	f0 e0       	ldi	r31, 0x00	; 0
     592:	80 81       	ld	r24, Z
     594:	8a 60       	ori	r24, 0x0A	; 10
     596:	80 83       	st	Z, r24
	
	// initialize counter
	TCNT1 = 0;
     598:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7c0085>
     59c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7c0084>
	
	// initialize compare value --> OCR1A = 16000000/(2*8*100) -1=9999
	OCR1A = 9999;
     5a0:	8f e0       	ldi	r24, 0x0F	; 15
     5a2:	97 e2       	ldi	r25, 0x27	; 39
     5a4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
     5a8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
	
	// enable compare interrupt
	TIMSK1 |= _BV(OCIE1A);
     5ac:	ef e6       	ldi	r30, 0x6F	; 111
     5ae:	f0 e0       	ldi	r31, 0x00	; 0
     5b0:	80 81       	ld	r24, Z
     5b2:	82 60       	ori	r24, 0x02	; 2
     5b4:	80 83       	st	Z, r24
	
	
	//enable timer4 to take the temperature each seconde
	// set up timer with prescaler = 256 (prescaler) and CTC mode
	TCCR4B |= _BV(WGM42)| _BV(CS42);
     5b6:	e1 ea       	ldi	r30, 0xA1	; 161
     5b8:	f0 e0       	ldi	r31, 0x00	; 0
     5ba:	80 81       	ld	r24, Z
     5bc:	8c 60       	ori	r24, 0x0C	; 12
     5be:	80 83       	st	Z, r24
	
	// initialize compare value --> OCR4A=16000000/(2*256*1) -1=31249
	OCR4A = 31249;
     5c0:	81 e1       	ldi	r24, 0x11	; 17
     5c2:	9a e7       	ldi	r25, 0x7A	; 122
     5c4:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
     5c8:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
	
	// enable compare interrupt
	TIMSK4 |= _BV(OCIE4A);
     5cc:	e2 e7       	ldi	r30, 0x72	; 114
     5ce:	f0 e0       	ldi	r31, 0x00	; 0
     5d0:	80 81       	ld	r24, Z
     5d2:	82 60       	ori	r24, 0x02	; 2
     5d4:	80 83       	st	Z, r24
	
	// enable global interrupts
	sei();
     5d6:	78 94       	sei
     5d8:	08 95       	ret

000005da <init_display>:
}

void init_display()
{
	//RCK-->PB0 and when the 8 segments are good, SCK-->PB1 for each segment and SI-->PB2 for the value
	DDRB |= _BV(RCK) | _BV(SCK) | _BV(SI);
     5da:	84 b1       	in	r24, 0x04	; 4
     5dc:	87 60       	ori	r24, 0x07	; 7
     5de:	84 b9       	out	0x04, r24	; 4
	//D1-->PF0, D2-->PF1, D3-->PF2, D4-->PF3,
	DDRF |= _BV(D1) | _BV(D2) | _BV(D3) | _BV(D4);
     5e0:	80 b3       	in	r24, 0x10	; 16
     5e2:	8f 60       	ori	r24, 0x0F	; 15
     5e4:	80 bb       	out	0x10, r24	; 16
	
	PORTB &= ~(_BV(RCK) | _BV(SCK) | _BV(SI));
     5e6:	85 b1       	in	r24, 0x05	; 5
     5e8:	88 7f       	andi	r24, 0xF8	; 248
     5ea:	85 b9       	out	0x05, r24	; 5
	PORTF |= _BV(D1) | _BV(D2) | _BV(D3) | _BV(D4);
     5ec:	81 b3       	in	r24, 0x11	; 17
     5ee:	8f 60       	ori	r24, 0x0F	; 15
     5f0:	81 bb       	out	0x11, r24	; 17
     5f2:	08 95       	ret

000005f4 <printint_1u>:
}

uint16_t printint_1u(uint16_t value)//Function to divide the number in 4 different digit to know which number to display on which digit
{
     5f4:	0f 93       	push	r16
     5f6:	1f 93       	push	r17
     5f8:	cf 93       	push	r28
     5fa:	df 93       	push	r29
     5fc:	ac 01       	movw	r20, r24
	uint16_t dig1, dig2, dig3, dig4;
	dig1=value/1000;
     5fe:	ec 01       	movw	r28, r24
     600:	d6 95       	lsr	r29
     602:	c7 95       	ror	r28
     604:	d6 95       	lsr	r29
     606:	c7 95       	ror	r28
     608:	d6 95       	lsr	r29
     60a:	c7 95       	ror	r28
     60c:	9e 01       	movw	r18, r28
     60e:	a5 ec       	ldi	r26, 0xC5	; 197
     610:	b0 e2       	ldi	r27, 0x20	; 32
     612:	f0 d4       	rcall	.+2528   	; 0xff4 <__umulhisi3>
     614:	fc 01       	movw	r30, r24
     616:	f2 95       	swap	r31
     618:	e2 95       	swap	r30
     61a:	ef 70       	andi	r30, 0x0F	; 15
     61c:	ef 27       	eor	r30, r31
     61e:	ff 70       	andi	r31, 0x0F	; 15
     620:	ef 27       	eor	r30, r31
	dig2=(value%1000)/100;
     622:	28 ee       	ldi	r18, 0xE8	; 232
     624:	33 e0       	ldi	r19, 0x03	; 3
     626:	e2 9f       	mul	r30, r18
     628:	c0 01       	movw	r24, r0
     62a:	e3 9f       	mul	r30, r19
     62c:	90 0d       	add	r25, r0
     62e:	f2 9f       	mul	r31, r18
     630:	90 0d       	add	r25, r0
     632:	11 24       	eor	r1, r1
     634:	9a 01       	movw	r18, r20
     636:	28 1b       	sub	r18, r24
     638:	39 0b       	sbc	r19, r25
     63a:	36 95       	lsr	r19
     63c:	27 95       	ror	r18
     63e:	36 95       	lsr	r19
     640:	27 95       	ror	r18
     642:	ab e7       	ldi	r26, 0x7B	; 123
     644:	b4 e1       	ldi	r27, 0x14	; 20
     646:	d6 d4       	rcall	.+2476   	; 0xff4 <__umulhisi3>
     648:	ec 01       	movw	r28, r24
     64a:	d6 95       	lsr	r29
     64c:	c7 95       	ror	r28
	dig3=(value%100)/10;
     64e:	9a 01       	movw	r18, r20
     650:	36 95       	lsr	r19
     652:	27 95       	ror	r18
     654:	36 95       	lsr	r19
     656:	27 95       	ror	r18
     658:	cd d4       	rcall	.+2458   	; 0xff4 <__umulhisi3>
     65a:	9c 01       	movw	r18, r24
     65c:	36 95       	lsr	r19
     65e:	27 95       	ror	r18
     660:	64 e6       	ldi	r22, 0x64	; 100
     662:	62 9f       	mul	r22, r18
     664:	c0 01       	movw	r24, r0
     666:	63 9f       	mul	r22, r19
     668:	90 0d       	add	r25, r0
     66a:	11 24       	eor	r1, r1
     66c:	9a 01       	movw	r18, r20
     66e:	28 1b       	sub	r18, r24
     670:	39 0b       	sbc	r19, r25
     672:	ad ec       	ldi	r26, 0xCD	; 205
     674:	bc ec       	ldi	r27, 0xCC	; 204
     676:	be d4       	rcall	.+2428   	; 0xff4 <__umulhisi3>
     678:	8c 01       	movw	r16, r24
     67a:	16 95       	lsr	r17
     67c:	07 95       	ror	r16
     67e:	16 95       	lsr	r17
     680:	07 95       	ror	r16
     682:	16 95       	lsr	r17
	dig4=value%10;
     684:	07 95       	ror	r16
     686:	9a 01       	movw	r18, r20
     688:	b5 d4       	rcall	.+2410   	; 0xff4 <__umulhisi3>
     68a:	96 95       	lsr	r25
     68c:	87 95       	ror	r24
     68e:	96 95       	lsr	r25
     690:	87 95       	ror	r24
     692:	96 95       	lsr	r25
     694:	87 95       	ror	r24
     696:	9c 01       	movw	r18, r24
     698:	22 0f       	add	r18, r18
     69a:	33 1f       	adc	r19, r19
     69c:	88 0f       	add	r24, r24
     69e:	99 1f       	adc	r25, r25
     6a0:	88 0f       	add	r24, r24
     6a2:	99 1f       	adc	r25, r25
     6a4:	88 0f       	add	r24, r24
     6a6:	99 1f       	adc	r25, r25
     6a8:	82 0f       	add	r24, r18
     6aa:	93 1f       	adc	r25, r19
     6ac:	9a 01       	movw	r18, r20
     6ae:	28 1b       	sub	r18, r24
     6b0:	39 0b       	sbc	r19, r25
     6b2:	c9 01       	movw	r24, r18
	
	if(digit==4)
     6b4:	20 91 26 02 	lds	r18, 0x0226	; 0x800226 <digit>
     6b8:	30 91 27 02 	lds	r19, 0x0227	; 0x800227 <digit+0x1>
     6bc:	24 30       	cpi	r18, 0x04	; 4
     6be:	31 05       	cpc	r19, r1
     6c0:	91 f0       	breq	.+36     	; 0x6e6 <printint_1u+0xf2>
	{
		return dig4;
	}
	if(digit==3)
     6c2:	23 30       	cpi	r18, 0x03	; 3
     6c4:	31 05       	cpc	r19, r1
     6c6:	39 f0       	breq	.+14     	; 0x6d6 <printint_1u+0xe2>
	{
		return dig3;
	}
	if(digit==2)
     6c8:	22 30       	cpi	r18, 0x02	; 2
     6ca:	31 05       	cpc	r19, r1
     6cc:	39 f0       	breq	.+14     	; 0x6dc <printint_1u+0xe8>
	{
		return dig2;
	}
	if(digit==1)
     6ce:	21 30       	cpi	r18, 0x01	; 1
     6d0:	31 05       	cpc	r19, r1
     6d2:	39 f0       	breq	.+14     	; 0x6e2 <printint_1u+0xee>
	{
		return dig1;
	}
}
     6d4:	08 c0       	rjmp	.+16     	; 0x6e6 <printint_1u+0xf2>
	{
		return dig4;
	}
	if(digit==3)
	{
		return dig3;
     6d6:	80 2f       	mov	r24, r16
     6d8:	91 2f       	mov	r25, r17
     6da:	05 c0       	rjmp	.+10     	; 0x6e6 <printint_1u+0xf2>
	}
	if(digit==2)
	{
		return dig2;
     6dc:	8c 2f       	mov	r24, r28
     6de:	9d 2f       	mov	r25, r29
     6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <printint_1u+0xf2>
	}
	if(digit==1)
	{
		return dig1;
     6e2:	8e 2f       	mov	r24, r30
     6e4:	9f 2f       	mov	r25, r31
	}
}
     6e6:	df 91       	pop	r29
     6e8:	cf 91       	pop	r28
     6ea:	1f 91       	pop	r17
     6ec:	0f 91       	pop	r16
     6ee:	08 95       	ret

000006f0 <printint_4u>:

void printint_4u(uint16_t value)//void printint_4u(uint16_t value, uint8_t nbdigit)
{
     6f0:	cf 93       	push	r28
     6f2:	df 93       	push	r29
     6f4:	cd b7       	in	r28, 0x3d	; 61
     6f6:	de b7       	in	r29, 0x3e	; 62
     6f8:	c0 5c       	subi	r28, 0xC0	; 192
     6fa:	d1 09       	sbc	r29, r1
     6fc:	0f b6       	in	r0, 0x3f	; 63
     6fe:	f8 94       	cli
     700:	de bf       	out	0x3e, r29	; 62
     702:	0f be       	out	0x3f, r0	; 63
     704:	cd bf       	out	0x3d, r28	; 61
	//Array to display
	int display[8];
	//Array for each number
	int numbers [11][8] = {
     706:	20 eb       	ldi	r18, 0xB0	; 176
     708:	e8 e2       	ldi	r30, 0x28	; 40
     70a:	f2 e0       	ldi	r31, 0x02	; 2
     70c:	de 01       	movw	r26, r28
     70e:	51 96       	adiw	r26, 0x11	; 17
     710:	01 90       	ld	r0, Z+
     712:	0d 92       	st	X+, r0
     714:	2a 95       	dec	r18
     716:	e1 f7       	brne	.-8      	; 0x710 <printint_4u+0x20>
		{1,0,0,0,0,0,0,0},//8
		{1,0,0,1,0,0,0,0},//9
		{1,0,0,0,0,1,1,0}//E
	};
	//if there is more than 4 digit, print EEEE on the 7 segments, so row 11 of the array
	if (value>9999)
     718:	80 31       	cpi	r24, 0x10	; 16
     71a:	27 e2       	ldi	r18, 0x27	; 39
     71c:	92 07       	cpc	r25, r18
     71e:	b8 f4       	brcc	.+46     	; 0x74e <printint_4u+0x5e>
     720:	1f c0       	rjmp	.+62     	; 0x760 <printint_4u+0x70>
	{
		for (int i=0; i<8;i++)
		{
			display[i] = numbers[10][i];
     722:	fc 01       	movw	r30, r24
     724:	e0 5b       	subi	r30, 0xB0	; 176
     726:	ff 4f       	sbci	r31, 0xFF	; 255
     728:	ee 0f       	add	r30, r30
     72a:	ff 1f       	adc	r31, r31
     72c:	41 e0       	ldi	r20, 0x01	; 1
     72e:	50 e0       	ldi	r21, 0x00	; 0
     730:	4c 0f       	add	r20, r28
     732:	5d 1f       	adc	r21, r29
     734:	e4 0f       	add	r30, r20
     736:	f5 1f       	adc	r31, r21
     738:	20 89       	ldd	r18, Z+16	; 0x10
     73a:	31 89       	ldd	r19, Z+17	; 0x11
     73c:	fc 01       	movw	r30, r24
     73e:	ee 0f       	add	r30, r30
     740:	ff 1f       	adc	r31, r31
     742:	e4 0f       	add	r30, r20
     744:	f5 1f       	adc	r31, r21
     746:	31 83       	std	Z+1, r19	; 0x01
     748:	20 83       	st	Z, r18
		{1,0,0,0,0,1,1,0}//E
	};
	//if there is more than 4 digit, print EEEE on the 7 segments, so row 11 of the array
	if (value>9999)
	{
		for (int i=0; i<8;i++)
     74a:	01 96       	adiw	r24, 0x01	; 1
     74c:	02 c0       	rjmp	.+4      	; 0x752 <printint_4u+0x62>
     74e:	80 e0       	ldi	r24, 0x00	; 0
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	88 30       	cpi	r24, 0x08	; 8
     754:	91 05       	cpc	r25, r1
     756:	2c f3       	brlt	.-54     	; 0x722 <printint_4u+0x32>
		{
			display[i] = numbers[10][i];
		}
		PORTF &= ~(_BV(D1) | _BV(D2) | _BV(D3) | _BV(D4));
     758:	81 b3       	in	r24, 0x11	; 17
     75a:	80 7f       	andi	r24, 0xF0	; 240
     75c:	81 bb       	out	0x11, r24	; 17
     75e:	a3 c0       	rjmp	.+326    	; 0x8a6 <printint_4u+0x1b6>
		//if(nbdigit==0)
			//{
				//value=value/100;
			//}
		//save the number to display on the 4 digit
		uint16_t todisplay=printint_1u(value);
     760:	49 df       	rcall	.-366    	; 0x5f4 <printint_1u>

		//turn off all the digit
		PORTF |= _BV(D1) | _BV(D2) | _BV(D3) | _BV(D4);
     762:	21 b3       	in	r18, 0x11	; 17
     764:	2f 60       	ori	r18, 0x0F	; 15
     766:	21 bb       	out	0x11, r18	; 17
		
		//create a table to know which segment to turn on
		for (int i=0; i<8;i++)
     768:	20 e0       	ldi	r18, 0x00	; 0
     76a:	30 e0       	ldi	r19, 0x00	; 0
     76c:	1c c0       	rjmp	.+56     	; 0x7a6 <printint_4u+0xb6>
		{
			display[i] = numbers[todisplay][i];
     76e:	fc 01       	movw	r30, r24
     770:	ee 0f       	add	r30, r30
     772:	ff 1f       	adc	r31, r31
     774:	ee 0f       	add	r30, r30
     776:	ff 1f       	adc	r31, r31
     778:	ee 0f       	add	r30, r30
     77a:	ff 1f       	adc	r31, r31
     77c:	e2 0f       	add	r30, r18
     77e:	f3 1f       	adc	r31, r19
     780:	ee 0f       	add	r30, r30
     782:	ff 1f       	adc	r31, r31
     784:	61 e0       	ldi	r22, 0x01	; 1
     786:	70 e0       	ldi	r23, 0x00	; 0
     788:	6c 0f       	add	r22, r28
     78a:	7d 1f       	adc	r23, r29
     78c:	e6 0f       	add	r30, r22
     78e:	f7 1f       	adc	r31, r23
     790:	40 89       	ldd	r20, Z+16	; 0x10
     792:	51 89       	ldd	r21, Z+17	; 0x11
     794:	f9 01       	movw	r30, r18
     796:	ee 0f       	add	r30, r30
     798:	ff 1f       	adc	r31, r31
     79a:	e6 0f       	add	r30, r22
     79c:	f7 1f       	adc	r31, r23
     79e:	51 83       	std	Z+1, r21	; 0x01
     7a0:	40 83       	st	Z, r20

		//turn off all the digit
		PORTF |= _BV(D1) | _BV(D2) | _BV(D3) | _BV(D4);
		
		//create a table to know which segment to turn on
		for (int i=0; i<8;i++)
     7a2:	2f 5f       	subi	r18, 0xFF	; 255
     7a4:	3f 4f       	sbci	r19, 0xFF	; 255
     7a6:	28 30       	cpi	r18, 0x08	; 8
     7a8:	31 05       	cpc	r19, r1
     7aa:	0c f3       	brlt	.-62     	; 0x76e <printint_4u+0x7e>
		{
			display[i] = numbers[todisplay][i];
		}
		
		//4 if to not display the first digit if it's a 0, and for the second digit, if the first is 0 and the second too, don't display it, and same thing for digit 3
		if (digit==1)
     7ac:	20 91 26 02 	lds	r18, 0x0226	; 0x800226 <digit>
     7b0:	30 91 27 02 	lds	r19, 0x0227	; 0x800227 <digit+0x1>
     7b4:	21 30       	cpi	r18, 0x01	; 1
     7b6:	31 05       	cpc	r19, r1
     7b8:	01 f5       	brne	.+64     	; 0x7fa <printint_4u+0x10a>
		{
			if (todisplay==0)
     7ba:	89 2b       	or	r24, r25
     7bc:	69 f4       	brne	.+26     	; 0x7d8 <printint_4u+0xe8>
			{
				digit++;
     7be:	2f 5f       	subi	r18, 0xFF	; 255
     7c0:	3f 4f       	sbci	r19, 0xFF	; 255
     7c2:	30 93 27 02 	sts	0x0227, r19	; 0x800227 <digit+0x1>
     7c6:	20 93 26 02 	sts	0x0226, r18	; 0x800226 <digit>
				firstvalue=1;
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	90 93 27 03 	sts	0x0327, r25	; 0x800327 <firstvalue+0x1>
     7d2:	80 93 26 03 	sts	0x0326, r24	; 0x800326 <firstvalue>
     7d6:	67 c0       	rjmp	.+206    	; 0x8a6 <printint_4u+0x1b6>
			}
			else
			{
				PORTF &= ~_BV(D1);
     7d8:	81 b3       	in	r24, 0x11	; 17
     7da:	8e 7f       	andi	r24, 0xFE	; 254
     7dc:	81 bb       	out	0x11, r24	; 17
				digit++;
     7de:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <digit>
     7e2:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <digit+0x1>
     7e6:	01 96       	adiw	r24, 0x01	; 1
     7e8:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <digit+0x1>
     7ec:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <digit>
				firstvalue=0;
     7f0:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <firstvalue+0x1>
     7f4:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <firstvalue>
     7f8:	56 c0       	rjmp	.+172    	; 0x8a6 <printint_4u+0x1b6>
			}
		}
		else if (digit==2)
     7fa:	22 30       	cpi	r18, 0x02	; 2
     7fc:	31 05       	cpc	r19, r1
     7fe:	01 f5       	brne	.+64     	; 0x840 <printint_4u+0x150>
		{
			if (todisplay==0&&firstvalue==1)
     800:	89 2b       	or	r24, r25
     802:	69 f4       	brne	.+26     	; 0x81e <printint_4u+0x12e>
     804:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <firstvalue>
     808:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <firstvalue+0x1>
     80c:	01 97       	sbiw	r24, 0x01	; 1
     80e:	39 f4       	brne	.+14     	; 0x81e <printint_4u+0x12e>
			{
				digit++;
     810:	2f 5f       	subi	r18, 0xFF	; 255
     812:	3f 4f       	sbci	r19, 0xFF	; 255
     814:	30 93 27 02 	sts	0x0227, r19	; 0x800227 <digit+0x1>
     818:	20 93 26 02 	sts	0x0226, r18	; 0x800226 <digit>
     81c:	44 c0       	rjmp	.+136    	; 0x8a6 <printint_4u+0x1b6>
			}
			else
			{
				PORTF &= ~_BV(D2);
     81e:	81 b3       	in	r24, 0x11	; 17
     820:	8d 7f       	andi	r24, 0xFD	; 253
     822:	81 bb       	out	0x11, r24	; 17
				digit++;
     824:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <digit>
     828:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <digit+0x1>
     82c:	01 96       	adiw	r24, 0x01	; 1
     82e:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <digit+0x1>
     832:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <digit>
				firstvalue=0;
     836:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <firstvalue+0x1>
     83a:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <firstvalue>
     83e:	33 c0       	rjmp	.+102    	; 0x8a6 <printint_4u+0x1b6>
			//if(nbdigit==2)
			//{
				//display[0]=0;
			//}
		}
		else if (digit==3)
     840:	23 30       	cpi	r18, 0x03	; 3
     842:	31 05       	cpc	r19, r1
     844:	01 f5       	brne	.+64     	; 0x886 <printint_4u+0x196>
		{
			if (todisplay==0&&firstvalue==1)
     846:	89 2b       	or	r24, r25
     848:	69 f4       	brne	.+26     	; 0x864 <printint_4u+0x174>
     84a:	80 91 26 03 	lds	r24, 0x0326	; 0x800326 <firstvalue>
     84e:	90 91 27 03 	lds	r25, 0x0327	; 0x800327 <firstvalue+0x1>
     852:	01 97       	sbiw	r24, 0x01	; 1
     854:	39 f4       	brne	.+14     	; 0x864 <printint_4u+0x174>
			{
				digit++;
     856:	2f 5f       	subi	r18, 0xFF	; 255
     858:	3f 4f       	sbci	r19, 0xFF	; 255
     85a:	30 93 27 02 	sts	0x0227, r19	; 0x800227 <digit+0x1>
     85e:	20 93 26 02 	sts	0x0226, r18	; 0x800226 <digit>
     862:	21 c0       	rjmp	.+66     	; 0x8a6 <printint_4u+0x1b6>
			}
			else
			{
				PORTF &= ~_BV(D3);
     864:	81 b3       	in	r24, 0x11	; 17
     866:	8b 7f       	andi	r24, 0xFB	; 251
     868:	81 bb       	out	0x11, r24	; 17
				digit++;
     86a:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <digit>
     86e:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <digit+0x1>
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <digit+0x1>
     878:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <digit>
				firstvalue=0;
     87c:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <firstvalue+0x1>
     880:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <firstvalue>
     884:	10 c0       	rjmp	.+32     	; 0x8a6 <printint_4u+0x1b6>
			//{
				//
				//display[0]=0;
			//}
		}
		else if (digit==4)
     886:	24 30       	cpi	r18, 0x04	; 4
     888:	31 05       	cpc	r19, r1
     88a:	69 f4       	brne	.+26     	; 0x8a6 <printint_4u+0x1b6>
		{
			PORTF &= ~_BV(D4);
     88c:	81 b3       	in	r24, 0x11	; 17
     88e:	87 7f       	andi	r24, 0xF7	; 247
     890:	81 bb       	out	0x11, r24	; 17
			digit=1;
     892:	81 e0       	ldi	r24, 0x01	; 1
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <digit+0x1>
     89a:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <digit>
			firstvalue=0;
     89e:	10 92 27 03 	sts	0x0327, r1	; 0x800327 <firstvalue+0x1>
     8a2:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <firstvalue>
		}
	}
		
		//turn off to be at 0
		PORTB &= ~_BV(RCK);
     8a6:	85 b1       	in	r24, 0x05	; 5
     8a8:	8e 7f       	andi	r24, 0xFE	; 254
     8aa:	85 b9       	out	0x05, r24	; 5

		//for loop to change the value on the register
		for(int i=0; i<8; i++)
     8ac:	80 e0       	ldi	r24, 0x00	; 0
     8ae:	90 e0       	ldi	r25, 0x00	; 0
     8b0:	1b c0       	rjmp	.+54     	; 0x8e8 <printint_4u+0x1f8>
		{

			if(display[i]==0)
     8b2:	fc 01       	movw	r30, r24
     8b4:	ee 0f       	add	r30, r30
     8b6:	ff 1f       	adc	r31, r31
     8b8:	21 e0       	ldi	r18, 0x01	; 1
     8ba:	30 e0       	ldi	r19, 0x00	; 0
     8bc:	2c 0f       	add	r18, r28
     8be:	3d 1f       	adc	r19, r29
     8c0:	e2 0f       	add	r30, r18
     8c2:	f3 1f       	adc	r31, r19
     8c4:	20 81       	ld	r18, Z
     8c6:	31 81       	ldd	r19, Z+1	; 0x01
     8c8:	23 2b       	or	r18, r19
     8ca:	21 f4       	brne	.+8      	; 0x8d4 <printint_4u+0x1e4>
			{
				PORTB &= ~_BV(SI);
     8cc:	25 b1       	in	r18, 0x05	; 5
     8ce:	2b 7f       	andi	r18, 0xFB	; 251
     8d0:	25 b9       	out	0x05, r18	; 5
     8d2:	03 c0       	rjmp	.+6      	; 0x8da <printint_4u+0x1ea>
			}
			else
			{
				PORTB |= _BV(SI);
     8d4:	25 b1       	in	r18, 0x05	; 5
     8d6:	24 60       	ori	r18, 0x04	; 4
     8d8:	25 b9       	out	0x05, r18	; 5
			}
			//turn on and turn off each time to have the rising edge
			PORTB |= _BV(SCK);
     8da:	25 b1       	in	r18, 0x05	; 5
     8dc:	22 60       	ori	r18, 0x02	; 2
     8de:	25 b9       	out	0x05, r18	; 5
			PORTB &= ~_BV(SCK);
     8e0:	25 b1       	in	r18, 0x05	; 5
     8e2:	2d 7f       	andi	r18, 0xFD	; 253
     8e4:	25 b9       	out	0x05, r18	; 5
		
		//turn off to be at 0
		PORTB &= ~_BV(RCK);

		//for loop to change the value on the register
		for(int i=0; i<8; i++)
     8e6:	01 96       	adiw	r24, 0x01	; 1
     8e8:	88 30       	cpi	r24, 0x08	; 8
     8ea:	91 05       	cpc	r25, r1
     8ec:	14 f3       	brlt	.-60     	; 0x8b2 <printint_4u+0x1c2>
			}
			//turn on and turn off each time to have the rising edge
			PORTB |= _BV(SCK);
			PORTB &= ~_BV(SCK);
		}
		PORTB |= _BV(RCK);
     8ee:	85 b1       	in	r24, 0x05	; 5
     8f0:	81 60       	ori	r24, 0x01	; 1
     8f2:	85 b9       	out	0x05, r24	; 5
}
     8f4:	c0 54       	subi	r28, 0x40	; 64
     8f6:	df 4f       	sbci	r29, 0xFF	; 255
     8f8:	0f b6       	in	r0, 0x3f	; 63
     8fa:	f8 94       	cli
     8fc:	de bf       	out	0x3e, r29	; 62
     8fe:	0f be       	out	0x3f, r0	; 63
     900:	cd bf       	out	0x3d, r28	; 61
     902:	df 91       	pop	r29
     904:	cf 91       	pop	r28
     906:	08 95       	ret

00000908 <chooseToDisplay>:

void chooseToDisplay()
{
	if(get_key(1))
     908:	81 e0       	ldi	r24, 0x01	; 1
     90a:	9b dc       	rcall	.-1738   	; 0x242 <get_key>
     90c:	88 23       	and	r24, r24
     90e:	99 f0       	breq	.+38     	; 0x936 <chooseToDisplay+0x2e>
	{
		displayMin=1;
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	90 93 2d 03 	sts	0x032D, r25	; 0x80032d <displayMin+0x1>
     918:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <displayMin>
		displayMax=0;
     91c:	10 92 2f 03 	sts	0x032F, r1	; 0x80032f <displayMax+0x1>
     920:	10 92 2e 03 	sts	0x032E, r1	; 0x80032e <displayMax>
		displayTemp=0;
     924:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <displayTemp+0x1>
     928:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <displayTemp>
		changevalue=0;
     92c:	10 92 31 03 	sts	0x0331, r1	; 0x800331 <changevalue+0x1>
     930:	10 92 30 03 	sts	0x0330, r1	; 0x800330 <changevalue>
		resetvalue();
	}
	if(get_key(2))
     934:	23 de       	rcall	.-954    	; 0x57c <resetvalue>
     936:	82 e0       	ldi	r24, 0x02	; 2
     938:	84 dc       	rcall	.-1784   	; 0x242 <get_key>
     93a:	88 23       	and	r24, r24
     93c:	99 f0       	breq	.+38     	; 0x964 <chooseToDisplay+0x5c>
	{
		displayMin=0;
     93e:	10 92 2d 03 	sts	0x032D, r1	; 0x80032d <displayMin+0x1>
     942:	10 92 2c 03 	sts	0x032C, r1	; 0x80032c <displayMin>
		displayMax=1;
     946:	81 e0       	ldi	r24, 0x01	; 1
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	90 93 2f 03 	sts	0x032F, r25	; 0x80032f <displayMax+0x1>
     94e:	80 93 2e 03 	sts	0x032E, r24	; 0x80032e <displayMax>
		displayTemp=0;
     952:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <displayTemp+0x1>
     956:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <displayTemp>
		changevalue=0;
     95a:	10 92 31 03 	sts	0x0331, r1	; 0x800331 <changevalue+0x1>
     95e:	10 92 30 03 	sts	0x0330, r1	; 0x800330 <changevalue>
		resetvalue();
     962:	0c de       	rcall	.-1000   	; 0x57c <resetvalue>
	}
	if(get_key(3))
     964:	83 e0       	ldi	r24, 0x03	; 3
     966:	6d dc       	rcall	.-1830   	; 0x242 <get_key>
     968:	88 23       	and	r24, r24
     96a:	99 f0       	breq	.+38     	; 0x992 <chooseToDisplay+0x8a>
     96c:	10 92 2d 03 	sts	0x032D, r1	; 0x80032d <displayMin+0x1>
	{
		displayMin=0;
     970:	10 92 2c 03 	sts	0x032C, r1	; 0x80032c <displayMin>
     974:	10 92 2f 03 	sts	0x032F, r1	; 0x80032f <displayMax+0x1>
		displayMax=0;
     978:	10 92 2e 03 	sts	0x032E, r1	; 0x80032e <displayMax>
     97c:	81 e0       	ldi	r24, 0x01	; 1
		displayTemp=1;
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <displayTemp+0x1>
     984:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <displayTemp>
		changevalue=0;
     988:	10 92 31 03 	sts	0x0331, r1	; 0x800331 <changevalue+0x1>
     98c:	10 92 30 03 	sts	0x0330, r1	; 0x800330 <changevalue>
		resetvalue();
     990:	f5 cd       	rjmp	.-1046   	; 0x57c <resetvalue>
     992:	08 95       	ret

00000994 <__vector_17>:
     994:	1f 92       	push	r1
	}
}

//Interrupt Time each 10 millisecond to display the digit, fast to don't see the blink
ISR(TIMER1_COMPA_vect)
{
     996:	0f 92       	push	r0
     998:	0f b6       	in	r0, 0x3f	; 63
     99a:	0f 92       	push	r0
     99c:	11 24       	eor	r1, r1
     99e:	0b b6       	in	r0, 0x3b	; 59
     9a0:	0f 92       	push	r0
     9a2:	2f 93       	push	r18
     9a4:	3f 93       	push	r19
     9a6:	4f 93       	push	r20
     9a8:	5f 93       	push	r21
     9aa:	6f 93       	push	r22
     9ac:	7f 93       	push	r23
     9ae:	8f 93       	push	r24
     9b0:	9f 93       	push	r25
     9b2:	af 93       	push	r26
     9b4:	bf 93       	push	r27
     9b6:	ef 93       	push	r30
     9b8:	ff 93       	push	r31
	chooseToDisplay();
     9ba:	a6 df       	rcall	.-180    	; 0x908 <chooseToDisplay>
	if(displayMin)
     9bc:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <displayMin>
     9c0:	90 91 2d 03 	lds	r25, 0x032D	; 0x80032d <displayMin+0x1>
     9c4:	89 2b       	or	r24, r25
     9c6:	09 f4       	brne	.+2      	; 0x9ca <__vector_17+0x36>
	{
		if (getxkey()<=9 || changevalue==1)
     9c8:	55 c0       	rjmp	.+170    	; 0xa74 <__vector_17+0xe0>
     9ca:	5b dd       	rcall	.-1354   	; 0x482 <getxkey>
     9cc:	8a 30       	cpi	r24, 0x0A	; 10
     9ce:	30 f0       	brcs	.+12     	; 0x9dc <__vector_17+0x48>
     9d0:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <changevalue>
     9d4:	90 91 31 03 	lds	r25, 0x0331	; 0x800331 <changevalue+0x1>
     9d8:	01 97       	sbiw	r24, 0x01	; 1
		{
			display=keyboard_display();
     9da:	59 f4       	brne	.+22     	; 0x9f2 <__vector_17+0x5e>
     9dc:	7d dd       	rcall	.-1286   	; 0x4d8 <keyboard_display>
     9de:	90 93 2b 03 	sts	0x032B, r25	; 0x80032b <display+0x1>
     9e2:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <display>
			changevalue=1;
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	90 93 31 03 	sts	0x0331, r25	; 0x800331 <changevalue+0x1>
     9ee:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <changevalue>
		}
		if (getxkey()==15)
     9f2:	47 dd       	rcall	.-1394   	; 0x482 <getxkey>
     9f4:	8f 30       	cpi	r24, 0x0F	; 15
     9f6:	01 f5       	brne	.+64     	; 0xa38 <__vector_17+0xa4>
		{
			tlow=display;
     9f8:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <display>
     9fc:	90 91 2b 03 	lds	r25, 0x032B	; 0x80032b <display+0x1>
     a00:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <tlow+0x1>
     a04:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <tlow>
			resetvalue();
     a08:	b9 dd       	rcall	.-1166   	; 0x57c <resetvalue>
			changevalue=0;
     a0a:	10 92 31 03 	sts	0x0331, r1	; 0x800331 <changevalue+0x1>
     a0e:	10 92 30 03 	sts	0x0330, r1	; 0x800330 <changevalue>
			if (tlow>thigh)
     a12:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <tlow>
     a16:	30 91 25 02 	lds	r19, 0x0225	; 0x800225 <tlow+0x1>
     a1a:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <thigh>
     a1e:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <thigh+0x1>
     a22:	82 17       	cp	r24, r18
     a24:	93 07       	cpc	r25, r19
     a26:	40 f4       	brcc	.+16     	; 0xa38 <__vector_17+0xa4>
			{
				uint16_t changeMaxMin = thigh;
				thigh=tlow;
     a28:	30 93 23 02 	sts	0x0223, r19	; 0x800223 <thigh+0x1>
     a2c:	20 93 22 02 	sts	0x0222, r18	; 0x800222 <thigh>
				tlow=changeMaxMin;
     a30:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <tlow+0x1>
			}
		}
		if (getxkey()==14)
     a34:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <tlow>
     a38:	24 dd       	rcall	.-1464   	; 0x482 <getxkey>
     a3a:	8e 30       	cpi	r24, 0x0E	; 14
		{
			resetvalue();
     a3c:	69 f4       	brne	.+26     	; 0xa58 <__vector_17+0xc4>
     a3e:	9e dd       	rcall	.-1220   	; 0x57c <resetvalue>
			changevalue=0;
     a40:	10 92 31 03 	sts	0x0331, r1	; 0x800331 <changevalue+0x1>
     a44:	10 92 30 03 	sts	0x0330, r1	; 0x800330 <changevalue>
			display=tlow;
     a48:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <tlow>
     a4c:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <tlow+0x1>
     a50:	90 93 2b 03 	sts	0x032B, r25	; 0x80032b <display+0x1>
     a54:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <display>
		}
		if (changevalue==0)
     a58:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <changevalue>
     a5c:	90 91 31 03 	lds	r25, 0x0331	; 0x800331 <changevalue+0x1>
     a60:	89 2b       	or	r24, r25
     a62:	41 f4       	brne	.+16     	; 0xa74 <__vector_17+0xe0>
		{
			display=tlow;
     a64:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <tlow>
     a68:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <tlow+0x1>
     a6c:	90 93 2b 03 	sts	0x032B, r25	; 0x80032b <display+0x1>
     a70:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <display>
		}
	}
	if(displayMax)
     a74:	80 91 2e 03 	lds	r24, 0x032E	; 0x80032e <displayMax>
     a78:	90 91 2f 03 	lds	r25, 0x032F	; 0x80032f <displayMax+0x1>
     a7c:	89 2b       	or	r24, r25
     a7e:	09 f4       	brne	.+2      	; 0xa82 <__vector_17+0xee>
	{
		if (getxkey()<=9 || changevalue==1)
     a80:	55 c0       	rjmp	.+170    	; 0xb2c <__vector_17+0x198>
     a82:	ff dc       	rcall	.-1538   	; 0x482 <getxkey>
     a84:	8a 30       	cpi	r24, 0x0A	; 10
     a86:	30 f0       	brcs	.+12     	; 0xa94 <__vector_17+0x100>
     a88:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <changevalue>
     a8c:	90 91 31 03 	lds	r25, 0x0331	; 0x800331 <changevalue+0x1>
     a90:	01 97       	sbiw	r24, 0x01	; 1
		{
			display=keyboard_display();
     a92:	59 f4       	brne	.+22     	; 0xaaa <__vector_17+0x116>
     a94:	21 dd       	rcall	.-1470   	; 0x4d8 <keyboard_display>
     a96:	90 93 2b 03 	sts	0x032B, r25	; 0x80032b <display+0x1>
     a9a:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <display>
			changevalue=1;
     a9e:	81 e0       	ldi	r24, 0x01	; 1
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	90 93 31 03 	sts	0x0331, r25	; 0x800331 <changevalue+0x1>
     aa6:	80 93 30 03 	sts	0x0330, r24	; 0x800330 <changevalue>
		}
		if (getxkey()==15)
     aaa:	eb dc       	rcall	.-1578   	; 0x482 <getxkey>
     aac:	8f 30       	cpi	r24, 0x0F	; 15
		{
			thigh=display;
     aae:	01 f5       	brne	.+64     	; 0xaf0 <__vector_17+0x15c>
     ab0:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <display>
     ab4:	90 91 2b 03 	lds	r25, 0x032B	; 0x80032b <display+0x1>
     ab8:	90 93 23 02 	sts	0x0223, r25	; 0x800223 <thigh+0x1>
     abc:	80 93 22 02 	sts	0x0222, r24	; 0x800222 <thigh>
			resetvalue();
     ac0:	5d dd       	rcall	.-1350   	; 0x57c <resetvalue>
			changevalue=0;
     ac2:	10 92 31 03 	sts	0x0331, r1	; 0x800331 <changevalue+0x1>
     ac6:	10 92 30 03 	sts	0x0330, r1	; 0x800330 <changevalue>
			if (tlow>thigh)
     aca:	20 91 24 02 	lds	r18, 0x0224	; 0x800224 <tlow>
     ace:	30 91 25 02 	lds	r19, 0x0225	; 0x800225 <tlow+0x1>
     ad2:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <thigh>
     ad6:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <thigh+0x1>
     ada:	82 17       	cp	r24, r18
     adc:	93 07       	cpc	r25, r19
			{
				uint16_t changeMaxMin = thigh;
				thigh=tlow;
     ade:	40 f4       	brcc	.+16     	; 0xaf0 <__vector_17+0x15c>
     ae0:	30 93 23 02 	sts	0x0223, r19	; 0x800223 <thigh+0x1>
				tlow=changeMaxMin;
     ae4:	20 93 22 02 	sts	0x0222, r18	; 0x800222 <thigh>
     ae8:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <tlow+0x1>
			}
		}
		if (getxkey()==14)
     aec:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <tlow>
     af0:	c8 dc       	rcall	.-1648   	; 0x482 <getxkey>
     af2:	8e 30       	cpi	r24, 0x0E	; 14
		{
			resetvalue();
     af4:	69 f4       	brne	.+26     	; 0xb10 <__vector_17+0x17c>
     af6:	42 dd       	rcall	.-1404   	; 0x57c <resetvalue>
			changevalue=0;
     af8:	10 92 31 03 	sts	0x0331, r1	; 0x800331 <changevalue+0x1>
     afc:	10 92 30 03 	sts	0x0330, r1	; 0x800330 <changevalue>
			display=thigh;
     b00:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <thigh>
     b04:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <thigh+0x1>
     b08:	90 93 2b 03 	sts	0x032B, r25	; 0x80032b <display+0x1>
     b0c:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <display>
		}
		if (changevalue==0)
     b10:	80 91 30 03 	lds	r24, 0x0330	; 0x800330 <changevalue>
     b14:	90 91 31 03 	lds	r25, 0x0331	; 0x800331 <changevalue+0x1>
     b18:	89 2b       	or	r24, r25
     b1a:	41 f4       	brne	.+16     	; 0xb2c <__vector_17+0x198>
		{
			display=thigh;
     b1c:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <thigh>
     b20:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <thigh+0x1>
     b24:	90 93 2b 03 	sts	0x032B, r25	; 0x80032b <display+0x1>
     b28:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <display>
		}
	}
	if(displayTemp)
     b2c:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <displayTemp>
     b30:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <displayTemp+0x1>
     b34:	89 2b       	or	r24, r25
	{
		display=temperature;	
     b36:	41 f0       	breq	.+16     	; 0xb48 <__vector_17+0x1b4>
     b38:	80 91 28 03 	lds	r24, 0x0328	; 0x800328 <temperature>
     b3c:	90 91 29 03 	lds	r25, 0x0329	; 0x800329 <temperature+0x1>
     b40:	90 93 2b 03 	sts	0x032B, r25	; 0x80032b <display+0x1>
     b44:	80 93 2a 03 	sts	0x032A, r24	; 0x80032a <display>
	}
	printint_4u(display);
     b48:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <display>
     b4c:	90 91 2b 03 	lds	r25, 0x032B	; 0x80032b <display+0x1>
	if (temperature>thigh)
     b50:	cf dd       	rcall	.-1122   	; 0x6f0 <printint_4u>
     b52:	20 91 28 03 	lds	r18, 0x0328	; 0x800328 <temperature>
     b56:	30 91 29 03 	lds	r19, 0x0329	; 0x800329 <temperature+0x1>
     b5a:	80 91 22 02 	lds	r24, 0x0222	; 0x800222 <thigh>
     b5e:	90 91 23 02 	lds	r25, 0x0223	; 0x800223 <thigh+0x1>
     b62:	82 17       	cp	r24, r18
     b64:	93 07       	cpc	r25, r19
	{
		set_led(1,1);
     b66:	18 f4       	brcc	.+6      	; 0xb6e <__vector_17+0x1da>
     b68:	61 e0       	ldi	r22, 0x01	; 1
     b6a:	81 e0       	ldi	r24, 0x01	; 1
	}
	if (temperature<tlow)
     b6c:	80 db       	rcall	.-2304   	; 0x26e <set_led>
     b6e:	20 91 28 03 	lds	r18, 0x0328	; 0x800328 <temperature>
     b72:	30 91 29 03 	lds	r19, 0x0329	; 0x800329 <temperature+0x1>
     b76:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <tlow>
     b7a:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <tlow+0x1>
     b7e:	28 17       	cp	r18, r24
     b80:	39 07       	cpc	r19, r25
	{
		set_led(1,0);
     b82:	18 f4       	brcc	.+6      	; 0xb8a <__vector_17+0x1f6>
     b84:	60 e0       	ldi	r22, 0x00	; 0
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	72 db       	rcall	.-2332   	; 0x26e <set_led>
	}
}
     b8a:	ff 91       	pop	r31
     b8c:	ef 91       	pop	r30
     b8e:	bf 91       	pop	r27
     b90:	af 91       	pop	r26
     b92:	9f 91       	pop	r25
     b94:	8f 91       	pop	r24
     b96:	7f 91       	pop	r23
     b98:	6f 91       	pop	r22
     b9a:	5f 91       	pop	r21
     b9c:	4f 91       	pop	r20
     b9e:	3f 91       	pop	r19
     ba0:	2f 91       	pop	r18
     ba2:	0f 90       	pop	r0
     ba4:	0b be       	out	0x3b, r0	; 59
     ba6:	0f 90       	pop	r0
     ba8:	0f be       	out	0x3f, r0	; 63
     baa:	0f 90       	pop	r0
     bac:	1f 90       	pop	r1
     bae:	18 95       	reti

00000bb0 <__vector_42>:

//Interrupt Time each second to take the temperature and have something stable on the display
ISR(TIMER4_COMPA_vect)
{
     bb0:	1f 92       	push	r1
     bb2:	0f 92       	push	r0
     bb4:	0f b6       	in	r0, 0x3f	; 63
     bb6:	0f 92       	push	r0
     bb8:	11 24       	eor	r1, r1
     bba:	0b b6       	in	r0, 0x3b	; 59
     bbc:	0f 92       	push	r0
     bbe:	2f 93       	push	r18
     bc0:	3f 93       	push	r19
     bc2:	4f 93       	push	r20
     bc4:	5f 93       	push	r21
     bc6:	6f 93       	push	r22
     bc8:	7f 93       	push	r23
     bca:	8f 93       	push	r24
     bcc:	9f 93       	push	r25
     bce:	af 93       	push	r26
     bd0:	bf 93       	push	r27
     bd2:	ef 93       	push	r30
     bd4:	ff 93       	push	r31
	adc_read();
     bd6:	c4 da       	rcall	.-2680   	; 0x160 <adc_read>
	temperature=temp_convertToCelcius();
     bd8:	cd da       	rcall	.-2662   	; 0x174 <temp_convertToCelcius>
     bda:	90 93 29 03 	sts	0x0329, r25	; 0x800329 <temperature+0x1>
     bde:	80 93 28 03 	sts	0x0328, r24	; 0x800328 <temperature>
     be2:	ff 91       	pop	r31
     be4:	ef 91       	pop	r30
     be6:	bf 91       	pop	r27
     be8:	af 91       	pop	r26
     bea:	9f 91       	pop	r25
     bec:	8f 91       	pop	r24
     bee:	7f 91       	pop	r23
     bf0:	6f 91       	pop	r22
     bf2:	5f 91       	pop	r21
     bf4:	4f 91       	pop	r20
     bf6:	3f 91       	pop	r19
     bf8:	2f 91       	pop	r18
     bfa:	0f 90       	pop	r0
     bfc:	0b be       	out	0x3b, r0	; 59
     bfe:	0f 90       	pop	r0
     c00:	0f be       	out	0x3f, r0	; 63
     c02:	0f 90       	pop	r0
     c04:	1f 90       	pop	r1
     c06:	18 95       	reti

00000c08 <main>:
#include "Drivers/led/led_driver.h"
#include <avr/interrupt.h>

int main(void)
{
	init_display();
     c08:	e8 dc       	rcall	.-1584   	; 0x5da <init_display>
	adc_init();
     c0a:	8c da       	rcall	.-2792   	; 0x124 <adc_init>
	time_init();
     c0c:	c0 dc       	rcall	.-1664   	; 0x58e <time_init>
	init_keys();
     c0e:	12 db       	rcall	.-2524   	; 0x234 <init_keys>
     c10:	51 db       	rcall	.-2398   	; 0x2b4 <init_keyboard>
	init_keyboard();
     c12:	29 db       	rcall	.-2478   	; 0x266 <inits_leds>
     c14:	ff cf       	rjmp	.-2      	; 0xc14 <main+0xc>

00000c16 <__subsf3>:
	inits_leds();
     c16:	50 58       	subi	r21, 0x80	; 128

00000c18 <__addsf3>:
     c18:	bb 27       	eor	r27, r27
     c1a:	aa 27       	eor	r26, r26
     c1c:	0e d0       	rcall	.+28     	; 0xc3a <__addsf3x>
     c1e:	4d c1       	rjmp	.+666    	; 0xeba <__fp_round>
     c20:	3e d1       	rcall	.+636    	; 0xe9e <__fp_pscA>
     c22:	30 f0       	brcs	.+12     	; 0xc30 <__addsf3+0x18>
     c24:	43 d1       	rcall	.+646    	; 0xeac <__fp_pscB>
     c26:	20 f0       	brcs	.+8      	; 0xc30 <__addsf3+0x18>
     c28:	31 f4       	brne	.+12     	; 0xc36 <__addsf3+0x1e>
     c2a:	9f 3f       	cpi	r25, 0xFF	; 255
     c2c:	11 f4       	brne	.+4      	; 0xc32 <__addsf3+0x1a>
     c2e:	1e f4       	brtc	.+6      	; 0xc36 <__addsf3+0x1e>
     c30:	33 c1       	rjmp	.+614    	; 0xe98 <__fp_nan>
     c32:	0e f4       	brtc	.+2      	; 0xc36 <__addsf3+0x1e>
     c34:	e0 95       	com	r30
     c36:	e7 fb       	bst	r30, 7
     c38:	29 c1       	rjmp	.+594    	; 0xe8c <__fp_inf>

00000c3a <__addsf3x>:
     c3a:	e9 2f       	mov	r30, r25
     c3c:	4f d1       	rcall	.+670    	; 0xedc <__fp_split3>
     c3e:	80 f3       	brcs	.-32     	; 0xc20 <__addsf3+0x8>
     c40:	ba 17       	cp	r27, r26
     c42:	62 07       	cpc	r22, r18
     c44:	73 07       	cpc	r23, r19
     c46:	84 07       	cpc	r24, r20
     c48:	95 07       	cpc	r25, r21
     c4a:	18 f0       	brcs	.+6      	; 0xc52 <__addsf3x+0x18>
     c4c:	71 f4       	brne	.+28     	; 0xc6a <__addsf3x+0x30>
     c4e:	9e f5       	brtc	.+102    	; 0xcb6 <__addsf3x+0x7c>
     c50:	67 c1       	rjmp	.+718    	; 0xf20 <__fp_zero>
     c52:	0e f4       	brtc	.+2      	; 0xc56 <__addsf3x+0x1c>
     c54:	e0 95       	com	r30
     c56:	0b 2e       	mov	r0, r27
     c58:	ba 2f       	mov	r27, r26
     c5a:	a0 2d       	mov	r26, r0
     c5c:	0b 01       	movw	r0, r22
     c5e:	b9 01       	movw	r22, r18
     c60:	90 01       	movw	r18, r0
     c62:	0c 01       	movw	r0, r24
     c64:	ca 01       	movw	r24, r20
     c66:	a0 01       	movw	r20, r0
     c68:	11 24       	eor	r1, r1
     c6a:	ff 27       	eor	r31, r31
     c6c:	59 1b       	sub	r21, r25
     c6e:	99 f0       	breq	.+38     	; 0xc96 <__addsf3x+0x5c>
     c70:	59 3f       	cpi	r21, 0xF9	; 249
     c72:	50 f4       	brcc	.+20     	; 0xc88 <__addsf3x+0x4e>
     c74:	50 3e       	cpi	r21, 0xE0	; 224
     c76:	68 f1       	brcs	.+90     	; 0xcd2 <__addsf3x+0x98>
     c78:	1a 16       	cp	r1, r26
     c7a:	f0 40       	sbci	r31, 0x00	; 0
     c7c:	a2 2f       	mov	r26, r18
     c7e:	23 2f       	mov	r18, r19
     c80:	34 2f       	mov	r19, r20
     c82:	44 27       	eor	r20, r20
     c84:	58 5f       	subi	r21, 0xF8	; 248
     c86:	f3 cf       	rjmp	.-26     	; 0xc6e <__addsf3x+0x34>
     c88:	46 95       	lsr	r20
     c8a:	37 95       	ror	r19
     c8c:	27 95       	ror	r18
     c8e:	a7 95       	ror	r26
     c90:	f0 40       	sbci	r31, 0x00	; 0
     c92:	53 95       	inc	r21
     c94:	c9 f7       	brne	.-14     	; 0xc88 <__addsf3x+0x4e>
     c96:	7e f4       	brtc	.+30     	; 0xcb6 <__addsf3x+0x7c>
     c98:	1f 16       	cp	r1, r31
     c9a:	ba 0b       	sbc	r27, r26
     c9c:	62 0b       	sbc	r22, r18
     c9e:	73 0b       	sbc	r23, r19
     ca0:	84 0b       	sbc	r24, r20
     ca2:	ba f0       	brmi	.+46     	; 0xcd2 <__addsf3x+0x98>
     ca4:	91 50       	subi	r25, 0x01	; 1
     ca6:	a1 f0       	breq	.+40     	; 0xcd0 <__addsf3x+0x96>
     ca8:	ff 0f       	add	r31, r31
     caa:	bb 1f       	adc	r27, r27
     cac:	66 1f       	adc	r22, r22
     cae:	77 1f       	adc	r23, r23
     cb0:	88 1f       	adc	r24, r24
     cb2:	c2 f7       	brpl	.-16     	; 0xca4 <__addsf3x+0x6a>
     cb4:	0e c0       	rjmp	.+28     	; 0xcd2 <__addsf3x+0x98>
     cb6:	ba 0f       	add	r27, r26
     cb8:	62 1f       	adc	r22, r18
     cba:	73 1f       	adc	r23, r19
     cbc:	84 1f       	adc	r24, r20
     cbe:	48 f4       	brcc	.+18     	; 0xcd2 <__addsf3x+0x98>
     cc0:	87 95       	ror	r24
     cc2:	77 95       	ror	r23
     cc4:	67 95       	ror	r22
     cc6:	b7 95       	ror	r27
     cc8:	f7 95       	ror	r31
     cca:	9e 3f       	cpi	r25, 0xFE	; 254
     ccc:	08 f0       	brcs	.+2      	; 0xcd0 <__addsf3x+0x96>
     cce:	b3 cf       	rjmp	.-154    	; 0xc36 <__addsf3+0x1e>
     cd0:	93 95       	inc	r25
     cd2:	88 0f       	add	r24, r24
     cd4:	08 f0       	brcs	.+2      	; 0xcd8 <__addsf3x+0x9e>
     cd6:	99 27       	eor	r25, r25
     cd8:	ee 0f       	add	r30, r30
     cda:	97 95       	ror	r25
     cdc:	87 95       	ror	r24
     cde:	08 95       	ret

00000ce0 <__divsf3>:
     ce0:	0c d0       	rcall	.+24     	; 0xcfa <__divsf3x>
     ce2:	eb c0       	rjmp	.+470    	; 0xeba <__fp_round>
     ce4:	e3 d0       	rcall	.+454    	; 0xeac <__fp_pscB>
     ce6:	40 f0       	brcs	.+16     	; 0xcf8 <__divsf3+0x18>
     ce8:	da d0       	rcall	.+436    	; 0xe9e <__fp_pscA>
     cea:	30 f0       	brcs	.+12     	; 0xcf8 <__divsf3+0x18>
     cec:	21 f4       	brne	.+8      	; 0xcf6 <__divsf3+0x16>
     cee:	5f 3f       	cpi	r21, 0xFF	; 255
     cf0:	19 f0       	breq	.+6      	; 0xcf8 <__divsf3+0x18>
     cf2:	cc c0       	rjmp	.+408    	; 0xe8c <__fp_inf>
     cf4:	51 11       	cpse	r21, r1
     cf6:	15 c1       	rjmp	.+554    	; 0xf22 <__fp_szero>
     cf8:	cf c0       	rjmp	.+414    	; 0xe98 <__fp_nan>

00000cfa <__divsf3x>:
     cfa:	f0 d0       	rcall	.+480    	; 0xedc <__fp_split3>
     cfc:	98 f3       	brcs	.-26     	; 0xce4 <__divsf3+0x4>

00000cfe <__divsf3_pse>:
     cfe:	99 23       	and	r25, r25
     d00:	c9 f3       	breq	.-14     	; 0xcf4 <__divsf3+0x14>
     d02:	55 23       	and	r21, r21
     d04:	b1 f3       	breq	.-20     	; 0xcf2 <__divsf3+0x12>
     d06:	95 1b       	sub	r25, r21
     d08:	55 0b       	sbc	r21, r21
     d0a:	bb 27       	eor	r27, r27
     d0c:	aa 27       	eor	r26, r26
     d0e:	62 17       	cp	r22, r18
     d10:	73 07       	cpc	r23, r19
     d12:	84 07       	cpc	r24, r20
     d14:	38 f0       	brcs	.+14     	; 0xd24 <__divsf3_pse+0x26>
     d16:	9f 5f       	subi	r25, 0xFF	; 255
     d18:	5f 4f       	sbci	r21, 0xFF	; 255
     d1a:	22 0f       	add	r18, r18
     d1c:	33 1f       	adc	r19, r19
     d1e:	44 1f       	adc	r20, r20
     d20:	aa 1f       	adc	r26, r26
     d22:	a9 f3       	breq	.-22     	; 0xd0e <__divsf3_pse+0x10>
     d24:	33 d0       	rcall	.+102    	; 0xd8c <__divsf3_pse+0x8e>
     d26:	0e 2e       	mov	r0, r30
     d28:	3a f0       	brmi	.+14     	; 0xd38 <__divsf3_pse+0x3a>
     d2a:	e0 e8       	ldi	r30, 0x80	; 128
     d2c:	30 d0       	rcall	.+96     	; 0xd8e <__divsf3_pse+0x90>
     d2e:	91 50       	subi	r25, 0x01	; 1
     d30:	50 40       	sbci	r21, 0x00	; 0
     d32:	e6 95       	lsr	r30
     d34:	00 1c       	adc	r0, r0
     d36:	ca f7       	brpl	.-14     	; 0xd2a <__divsf3_pse+0x2c>
     d38:	29 d0       	rcall	.+82     	; 0xd8c <__divsf3_pse+0x8e>
     d3a:	fe 2f       	mov	r31, r30
     d3c:	27 d0       	rcall	.+78     	; 0xd8c <__divsf3_pse+0x8e>
     d3e:	66 0f       	add	r22, r22
     d40:	77 1f       	adc	r23, r23
     d42:	88 1f       	adc	r24, r24
     d44:	bb 1f       	adc	r27, r27
     d46:	26 17       	cp	r18, r22
     d48:	37 07       	cpc	r19, r23
     d4a:	48 07       	cpc	r20, r24
     d4c:	ab 07       	cpc	r26, r27
     d4e:	b0 e8       	ldi	r27, 0x80	; 128
     d50:	09 f0       	breq	.+2      	; 0xd54 <__divsf3_pse+0x56>
     d52:	bb 0b       	sbc	r27, r27
     d54:	80 2d       	mov	r24, r0
     d56:	bf 01       	movw	r22, r30
     d58:	ff 27       	eor	r31, r31
     d5a:	93 58       	subi	r25, 0x83	; 131
     d5c:	5f 4f       	sbci	r21, 0xFF	; 255
     d5e:	2a f0       	brmi	.+10     	; 0xd6a <__divsf3_pse+0x6c>
     d60:	9e 3f       	cpi	r25, 0xFE	; 254
     d62:	51 05       	cpc	r21, r1
     d64:	68 f0       	brcs	.+26     	; 0xd80 <__divsf3_pse+0x82>
     d66:	92 c0       	rjmp	.+292    	; 0xe8c <__fp_inf>
     d68:	dc c0       	rjmp	.+440    	; 0xf22 <__fp_szero>
     d6a:	5f 3f       	cpi	r21, 0xFF	; 255
     d6c:	ec f3       	brlt	.-6      	; 0xd68 <__divsf3_pse+0x6a>
     d6e:	98 3e       	cpi	r25, 0xE8	; 232
     d70:	dc f3       	brlt	.-10     	; 0xd68 <__divsf3_pse+0x6a>
     d72:	86 95       	lsr	r24
     d74:	77 95       	ror	r23
     d76:	67 95       	ror	r22
     d78:	b7 95       	ror	r27
     d7a:	f7 95       	ror	r31
     d7c:	9f 5f       	subi	r25, 0xFF	; 255
     d7e:	c9 f7       	brne	.-14     	; 0xd72 <__divsf3_pse+0x74>
     d80:	88 0f       	add	r24, r24
     d82:	91 1d       	adc	r25, r1
     d84:	96 95       	lsr	r25
     d86:	87 95       	ror	r24
     d88:	97 f9       	bld	r25, 7
     d8a:	08 95       	ret
     d8c:	e1 e0       	ldi	r30, 0x01	; 1
     d8e:	66 0f       	add	r22, r22
     d90:	77 1f       	adc	r23, r23
     d92:	88 1f       	adc	r24, r24
     d94:	bb 1f       	adc	r27, r27
     d96:	62 17       	cp	r22, r18
     d98:	73 07       	cpc	r23, r19
     d9a:	84 07       	cpc	r24, r20
     d9c:	ba 07       	cpc	r27, r26
     d9e:	20 f0       	brcs	.+8      	; 0xda8 <__divsf3_pse+0xaa>
     da0:	62 1b       	sub	r22, r18
     da2:	73 0b       	sbc	r23, r19
     da4:	84 0b       	sbc	r24, r20
     da6:	ba 0b       	sbc	r27, r26
     da8:	ee 1f       	adc	r30, r30
     daa:	88 f7       	brcc	.-30     	; 0xd8e <__divsf3_pse+0x90>
     dac:	e0 95       	com	r30
     dae:	08 95       	ret

00000db0 <__fixsfsi>:
     db0:	04 d0       	rcall	.+8      	; 0xdba <__fixunssfsi>
     db2:	68 94       	set
     db4:	b1 11       	cpse	r27, r1
     db6:	b5 c0       	rjmp	.+362    	; 0xf22 <__fp_szero>
     db8:	08 95       	ret

00000dba <__fixunssfsi>:
     dba:	98 d0       	rcall	.+304    	; 0xeec <__fp_splitA>
     dbc:	88 f0       	brcs	.+34     	; 0xde0 <__fixunssfsi+0x26>
     dbe:	9f 57       	subi	r25, 0x7F	; 127
     dc0:	90 f0       	brcs	.+36     	; 0xde6 <__fixunssfsi+0x2c>
     dc2:	b9 2f       	mov	r27, r25
     dc4:	99 27       	eor	r25, r25
     dc6:	b7 51       	subi	r27, 0x17	; 23
     dc8:	a0 f0       	brcs	.+40     	; 0xdf2 <__fixunssfsi+0x38>
     dca:	d1 f0       	breq	.+52     	; 0xe00 <__fixunssfsi+0x46>
     dcc:	66 0f       	add	r22, r22
     dce:	77 1f       	adc	r23, r23
     dd0:	88 1f       	adc	r24, r24
     dd2:	99 1f       	adc	r25, r25
     dd4:	1a f0       	brmi	.+6      	; 0xddc <__fixunssfsi+0x22>
     dd6:	ba 95       	dec	r27
     dd8:	c9 f7       	brne	.-14     	; 0xdcc <__fixunssfsi+0x12>
     dda:	12 c0       	rjmp	.+36     	; 0xe00 <__fixunssfsi+0x46>
     ddc:	b1 30       	cpi	r27, 0x01	; 1
     dde:	81 f0       	breq	.+32     	; 0xe00 <__fixunssfsi+0x46>
     de0:	9f d0       	rcall	.+318    	; 0xf20 <__fp_zero>
     de2:	b1 e0       	ldi	r27, 0x01	; 1
     de4:	08 95       	ret
     de6:	9c c0       	rjmp	.+312    	; 0xf20 <__fp_zero>
     de8:	67 2f       	mov	r22, r23
     dea:	78 2f       	mov	r23, r24
     dec:	88 27       	eor	r24, r24
     dee:	b8 5f       	subi	r27, 0xF8	; 248
     df0:	39 f0       	breq	.+14     	; 0xe00 <__fixunssfsi+0x46>
     df2:	b9 3f       	cpi	r27, 0xF9	; 249
     df4:	cc f3       	brlt	.-14     	; 0xde8 <__fixunssfsi+0x2e>
     df6:	86 95       	lsr	r24
     df8:	77 95       	ror	r23
     dfa:	67 95       	ror	r22
     dfc:	b3 95       	inc	r27
     dfe:	d9 f7       	brne	.-10     	; 0xdf6 <__fixunssfsi+0x3c>
     e00:	3e f4       	brtc	.+14     	; 0xe10 <__fixunssfsi+0x56>
     e02:	90 95       	com	r25
     e04:	80 95       	com	r24
     e06:	70 95       	com	r23
     e08:	61 95       	neg	r22
     e0a:	7f 4f       	sbci	r23, 0xFF	; 255
     e0c:	8f 4f       	sbci	r24, 0xFF	; 255
     e0e:	9f 4f       	sbci	r25, 0xFF	; 255
     e10:	08 95       	ret

00000e12 <__floatunsisf>:
     e12:	e8 94       	clt
     e14:	09 c0       	rjmp	.+18     	; 0xe28 <__floatsisf+0x12>

00000e16 <__floatsisf>:
     e16:	97 fb       	bst	r25, 7
     e18:	3e f4       	brtc	.+14     	; 0xe28 <__floatsisf+0x12>
     e1a:	90 95       	com	r25
     e1c:	80 95       	com	r24
     e1e:	70 95       	com	r23
     e20:	61 95       	neg	r22
     e22:	7f 4f       	sbci	r23, 0xFF	; 255
     e24:	8f 4f       	sbci	r24, 0xFF	; 255
     e26:	9f 4f       	sbci	r25, 0xFF	; 255
     e28:	99 23       	and	r25, r25
     e2a:	a9 f0       	breq	.+42     	; 0xe56 <__floatsisf+0x40>
     e2c:	f9 2f       	mov	r31, r25
     e2e:	96 e9       	ldi	r25, 0x96	; 150
     e30:	bb 27       	eor	r27, r27
     e32:	93 95       	inc	r25
     e34:	f6 95       	lsr	r31
     e36:	87 95       	ror	r24
     e38:	77 95       	ror	r23
     e3a:	67 95       	ror	r22
     e3c:	b7 95       	ror	r27
     e3e:	f1 11       	cpse	r31, r1
     e40:	f8 cf       	rjmp	.-16     	; 0xe32 <__floatsisf+0x1c>
     e42:	fa f4       	brpl	.+62     	; 0xe82 <__floatsisf+0x6c>
     e44:	bb 0f       	add	r27, r27
     e46:	11 f4       	brne	.+4      	; 0xe4c <__floatsisf+0x36>
     e48:	60 ff       	sbrs	r22, 0
     e4a:	1b c0       	rjmp	.+54     	; 0xe82 <__floatsisf+0x6c>
     e4c:	6f 5f       	subi	r22, 0xFF	; 255
     e4e:	7f 4f       	sbci	r23, 0xFF	; 255
     e50:	8f 4f       	sbci	r24, 0xFF	; 255
     e52:	9f 4f       	sbci	r25, 0xFF	; 255
     e54:	16 c0       	rjmp	.+44     	; 0xe82 <__floatsisf+0x6c>
     e56:	88 23       	and	r24, r24
     e58:	11 f0       	breq	.+4      	; 0xe5e <__floatsisf+0x48>
     e5a:	96 e9       	ldi	r25, 0x96	; 150
     e5c:	11 c0       	rjmp	.+34     	; 0xe80 <__floatsisf+0x6a>
     e5e:	77 23       	and	r23, r23
     e60:	21 f0       	breq	.+8      	; 0xe6a <__floatsisf+0x54>
     e62:	9e e8       	ldi	r25, 0x8E	; 142
     e64:	87 2f       	mov	r24, r23
     e66:	76 2f       	mov	r23, r22
     e68:	05 c0       	rjmp	.+10     	; 0xe74 <__floatsisf+0x5e>
     e6a:	66 23       	and	r22, r22
     e6c:	71 f0       	breq	.+28     	; 0xe8a <__floatsisf+0x74>
     e6e:	96 e8       	ldi	r25, 0x86	; 134
     e70:	86 2f       	mov	r24, r22
     e72:	70 e0       	ldi	r23, 0x00	; 0
     e74:	60 e0       	ldi	r22, 0x00	; 0
     e76:	2a f0       	brmi	.+10     	; 0xe82 <__floatsisf+0x6c>
     e78:	9a 95       	dec	r25
     e7a:	66 0f       	add	r22, r22
     e7c:	77 1f       	adc	r23, r23
     e7e:	88 1f       	adc	r24, r24
     e80:	da f7       	brpl	.-10     	; 0xe78 <__floatsisf+0x62>
     e82:	88 0f       	add	r24, r24
     e84:	96 95       	lsr	r25
     e86:	87 95       	ror	r24
     e88:	97 f9       	bld	r25, 7
     e8a:	08 95       	ret

00000e8c <__fp_inf>:
     e8c:	97 f9       	bld	r25, 7
     e8e:	9f 67       	ori	r25, 0x7F	; 127
     e90:	80 e8       	ldi	r24, 0x80	; 128
     e92:	70 e0       	ldi	r23, 0x00	; 0
     e94:	60 e0       	ldi	r22, 0x00	; 0
     e96:	08 95       	ret

00000e98 <__fp_nan>:
     e98:	9f ef       	ldi	r25, 0xFF	; 255
     e9a:	80 ec       	ldi	r24, 0xC0	; 192
     e9c:	08 95       	ret

00000e9e <__fp_pscA>:
     e9e:	00 24       	eor	r0, r0
     ea0:	0a 94       	dec	r0
     ea2:	16 16       	cp	r1, r22
     ea4:	17 06       	cpc	r1, r23
     ea6:	18 06       	cpc	r1, r24
     ea8:	09 06       	cpc	r0, r25
     eaa:	08 95       	ret

00000eac <__fp_pscB>:
     eac:	00 24       	eor	r0, r0
     eae:	0a 94       	dec	r0
     eb0:	12 16       	cp	r1, r18
     eb2:	13 06       	cpc	r1, r19
     eb4:	14 06       	cpc	r1, r20
     eb6:	05 06       	cpc	r0, r21
     eb8:	08 95       	ret

00000eba <__fp_round>:
     eba:	09 2e       	mov	r0, r25
     ebc:	03 94       	inc	r0
     ebe:	00 0c       	add	r0, r0
     ec0:	11 f4       	brne	.+4      	; 0xec6 <__fp_round+0xc>
     ec2:	88 23       	and	r24, r24
     ec4:	52 f0       	brmi	.+20     	; 0xeda <__fp_round+0x20>
     ec6:	bb 0f       	add	r27, r27
     ec8:	40 f4       	brcc	.+16     	; 0xeda <__fp_round+0x20>
     eca:	bf 2b       	or	r27, r31
     ecc:	11 f4       	brne	.+4      	; 0xed2 <__fp_round+0x18>
     ece:	60 ff       	sbrs	r22, 0
     ed0:	04 c0       	rjmp	.+8      	; 0xeda <__fp_round+0x20>
     ed2:	6f 5f       	subi	r22, 0xFF	; 255
     ed4:	7f 4f       	sbci	r23, 0xFF	; 255
     ed6:	8f 4f       	sbci	r24, 0xFF	; 255
     ed8:	9f 4f       	sbci	r25, 0xFF	; 255
     eda:	08 95       	ret

00000edc <__fp_split3>:
     edc:	57 fd       	sbrc	r21, 7
     ede:	90 58       	subi	r25, 0x80	; 128
     ee0:	44 0f       	add	r20, r20
     ee2:	55 1f       	adc	r21, r21
     ee4:	59 f0       	breq	.+22     	; 0xefc <__fp_splitA+0x10>
     ee6:	5f 3f       	cpi	r21, 0xFF	; 255
     ee8:	71 f0       	breq	.+28     	; 0xf06 <__fp_splitA+0x1a>
     eea:	47 95       	ror	r20

00000eec <__fp_splitA>:
     eec:	88 0f       	add	r24, r24
     eee:	97 fb       	bst	r25, 7
     ef0:	99 1f       	adc	r25, r25
     ef2:	61 f0       	breq	.+24     	; 0xf0c <__fp_splitA+0x20>
     ef4:	9f 3f       	cpi	r25, 0xFF	; 255
     ef6:	79 f0       	breq	.+30     	; 0xf16 <__fp_splitA+0x2a>
     ef8:	87 95       	ror	r24
     efa:	08 95       	ret
     efc:	12 16       	cp	r1, r18
     efe:	13 06       	cpc	r1, r19
     f00:	14 06       	cpc	r1, r20
     f02:	55 1f       	adc	r21, r21
     f04:	f2 cf       	rjmp	.-28     	; 0xeea <__fp_split3+0xe>
     f06:	46 95       	lsr	r20
     f08:	f1 df       	rcall	.-30     	; 0xeec <__fp_splitA>
     f0a:	08 c0       	rjmp	.+16     	; 0xf1c <__fp_splitA+0x30>
     f0c:	16 16       	cp	r1, r22
     f0e:	17 06       	cpc	r1, r23
     f10:	18 06       	cpc	r1, r24
     f12:	99 1f       	adc	r25, r25
     f14:	f1 cf       	rjmp	.-30     	; 0xef8 <__fp_splitA+0xc>
     f16:	86 95       	lsr	r24
     f18:	71 05       	cpc	r23, r1
     f1a:	61 05       	cpc	r22, r1
     f1c:	08 94       	sec
     f1e:	08 95       	ret

00000f20 <__fp_zero>:
     f20:	e8 94       	clt

00000f22 <__fp_szero>:
     f22:	bb 27       	eor	r27, r27
     f24:	66 27       	eor	r22, r22
     f26:	77 27       	eor	r23, r23
     f28:	cb 01       	movw	r24, r22
     f2a:	97 f9       	bld	r25, 7
     f2c:	08 95       	ret

00000f2e <__mulsf3>:
     f2e:	0b d0       	rcall	.+22     	; 0xf46 <__mulsf3x>
     f30:	c4 cf       	rjmp	.-120    	; 0xeba <__fp_round>
     f32:	b5 df       	rcall	.-150    	; 0xe9e <__fp_pscA>
     f34:	28 f0       	brcs	.+10     	; 0xf40 <__mulsf3+0x12>
     f36:	ba df       	rcall	.-140    	; 0xeac <__fp_pscB>
     f38:	18 f0       	brcs	.+6      	; 0xf40 <__mulsf3+0x12>
     f3a:	95 23       	and	r25, r21
     f3c:	09 f0       	breq	.+2      	; 0xf40 <__mulsf3+0x12>
     f3e:	a6 cf       	rjmp	.-180    	; 0xe8c <__fp_inf>
     f40:	ab cf       	rjmp	.-170    	; 0xe98 <__fp_nan>
     f42:	11 24       	eor	r1, r1
     f44:	ee cf       	rjmp	.-36     	; 0xf22 <__fp_szero>

00000f46 <__mulsf3x>:
     f46:	ca df       	rcall	.-108    	; 0xedc <__fp_split3>
     f48:	a0 f3       	brcs	.-24     	; 0xf32 <__mulsf3+0x4>

00000f4a <__mulsf3_pse>:
     f4a:	95 9f       	mul	r25, r21
     f4c:	d1 f3       	breq	.-12     	; 0xf42 <__mulsf3+0x14>
     f4e:	95 0f       	add	r25, r21
     f50:	50 e0       	ldi	r21, 0x00	; 0
     f52:	55 1f       	adc	r21, r21
     f54:	62 9f       	mul	r22, r18
     f56:	f0 01       	movw	r30, r0
     f58:	72 9f       	mul	r23, r18
     f5a:	bb 27       	eor	r27, r27
     f5c:	f0 0d       	add	r31, r0
     f5e:	b1 1d       	adc	r27, r1
     f60:	63 9f       	mul	r22, r19
     f62:	aa 27       	eor	r26, r26
     f64:	f0 0d       	add	r31, r0
     f66:	b1 1d       	adc	r27, r1
     f68:	aa 1f       	adc	r26, r26
     f6a:	64 9f       	mul	r22, r20
     f6c:	66 27       	eor	r22, r22
     f6e:	b0 0d       	add	r27, r0
     f70:	a1 1d       	adc	r26, r1
     f72:	66 1f       	adc	r22, r22
     f74:	82 9f       	mul	r24, r18
     f76:	22 27       	eor	r18, r18
     f78:	b0 0d       	add	r27, r0
     f7a:	a1 1d       	adc	r26, r1
     f7c:	62 1f       	adc	r22, r18
     f7e:	73 9f       	mul	r23, r19
     f80:	b0 0d       	add	r27, r0
     f82:	a1 1d       	adc	r26, r1
     f84:	62 1f       	adc	r22, r18
     f86:	83 9f       	mul	r24, r19
     f88:	a0 0d       	add	r26, r0
     f8a:	61 1d       	adc	r22, r1
     f8c:	22 1f       	adc	r18, r18
     f8e:	74 9f       	mul	r23, r20
     f90:	33 27       	eor	r19, r19
     f92:	a0 0d       	add	r26, r0
     f94:	61 1d       	adc	r22, r1
     f96:	23 1f       	adc	r18, r19
     f98:	84 9f       	mul	r24, r20
     f9a:	60 0d       	add	r22, r0
     f9c:	21 1d       	adc	r18, r1
     f9e:	82 2f       	mov	r24, r18
     fa0:	76 2f       	mov	r23, r22
     fa2:	6a 2f       	mov	r22, r26
     fa4:	11 24       	eor	r1, r1
     fa6:	9f 57       	subi	r25, 0x7F	; 127
     fa8:	50 40       	sbci	r21, 0x00	; 0
     faa:	8a f0       	brmi	.+34     	; 0xfce <__mulsf3_pse+0x84>
     fac:	e1 f0       	breq	.+56     	; 0xfe6 <__mulsf3_pse+0x9c>
     fae:	88 23       	and	r24, r24
     fb0:	4a f0       	brmi	.+18     	; 0xfc4 <__mulsf3_pse+0x7a>
     fb2:	ee 0f       	add	r30, r30
     fb4:	ff 1f       	adc	r31, r31
     fb6:	bb 1f       	adc	r27, r27
     fb8:	66 1f       	adc	r22, r22
     fba:	77 1f       	adc	r23, r23
     fbc:	88 1f       	adc	r24, r24
     fbe:	91 50       	subi	r25, 0x01	; 1
     fc0:	50 40       	sbci	r21, 0x00	; 0
     fc2:	a9 f7       	brne	.-22     	; 0xfae <__mulsf3_pse+0x64>
     fc4:	9e 3f       	cpi	r25, 0xFE	; 254
     fc6:	51 05       	cpc	r21, r1
     fc8:	70 f0       	brcs	.+28     	; 0xfe6 <__mulsf3_pse+0x9c>
     fca:	60 cf       	rjmp	.-320    	; 0xe8c <__fp_inf>
     fcc:	aa cf       	rjmp	.-172    	; 0xf22 <__fp_szero>
     fce:	5f 3f       	cpi	r21, 0xFF	; 255
     fd0:	ec f3       	brlt	.-6      	; 0xfcc <__mulsf3_pse+0x82>
     fd2:	98 3e       	cpi	r25, 0xE8	; 232
     fd4:	dc f3       	brlt	.-10     	; 0xfcc <__mulsf3_pse+0x82>
     fd6:	86 95       	lsr	r24
     fd8:	77 95       	ror	r23
     fda:	67 95       	ror	r22
     fdc:	b7 95       	ror	r27
     fde:	f7 95       	ror	r31
     fe0:	e7 95       	ror	r30
     fe2:	9f 5f       	subi	r25, 0xFF	; 255
     fe4:	c1 f7       	brne	.-16     	; 0xfd6 <__mulsf3_pse+0x8c>
     fe6:	fe 2b       	or	r31, r30
     fe8:	88 0f       	add	r24, r24
     fea:	91 1d       	adc	r25, r1
     fec:	96 95       	lsr	r25
     fee:	87 95       	ror	r24
     ff0:	97 f9       	bld	r25, 7
     ff2:	08 95       	ret

00000ff4 <__umulhisi3>:
     ff4:	a2 9f       	mul	r26, r18
     ff6:	b0 01       	movw	r22, r0
     ff8:	b3 9f       	mul	r27, r19
     ffa:	c0 01       	movw	r24, r0
     ffc:	a3 9f       	mul	r26, r19
     ffe:	70 0d       	add	r23, r0
    1000:	81 1d       	adc	r24, r1
    1002:	11 24       	eor	r1, r1
    1004:	91 1d       	adc	r25, r1
    1006:	b2 9f       	mul	r27, r18
    1008:	70 0d       	add	r23, r0
    100a:	81 1d       	adc	r24, r1
    100c:	11 24       	eor	r1, r1
    100e:	91 1d       	adc	r25, r1
    1010:	08 95       	ret

00001012 <_exit>:
    1012:	f8 94       	cli

00001014 <__stop_program>:
    1014:	ff cf       	rjmp	.-2      	; 0x1014 <__stop_program>
